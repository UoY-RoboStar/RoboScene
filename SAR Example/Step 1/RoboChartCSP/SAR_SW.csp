
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 19-06-2024 12:19:47
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module SAR_SW
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel FollowPlan: InOut.SearchType
	channel MoveDrone: InOut.Direction
	channel FlyToCoordinate: InOut.Coord
	channel FlyToAreaCoordinates: InOut.AreaCoords
	channel DroneStopSearch: InOut
	channel GetBatteryStatus: InOut
	channel OnOffDrone: InOut
	
	channel DisplayStatusCall: Status
	channel movementCall: Coord
	channel directionMovementCall: Direction
	channel initSearchCall: SearchType
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	channel get_droneOn, set_droneOn: core_boolean
	
	-- channel set with all visible events
	sem__events = {|
		FollowPlan,
		MoveDrone,
		FlyToCoordinate,
		FlyToAreaCoordinates,
		DroneStopSearch,
		GetBatteryStatus,
		OnOffDrone
	,	DisplayStatusCall,
		movementCall,
		directionMovementCall,
		initSearchCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
				set_EXT_droneOn
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel FollowPlan: InOut.SearchType
			channel MoveDrone: InOut.Direction
			channel FlyToCoordinate: InOut.Coord
			channel FlyToAreaCoordinates: InOut.AreaCoords
			channel DroneStopSearch: InOut
			
			channel set_droneOn: core_boolean
			channel get_droneOn: core_boolean
			
			channel set_EXT_droneOn: core_boolean
			
			-- declaring call and ret events for undefined operations
			channel initSearchCall: SearchType
			channel directionMovementCall: Direction
			channel movementCall: Coord
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	FollowPlan,
				MoveDrone,
				FlyToCoordinate,
				FlyToAreaCoordinates,
				DroneStopSearch
			,	set_EXT_droneOn, set_droneOn
			,	initSearchCall,
				directionMovementCall,
				movementCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_droneOn,set_droneOn|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_s0|
				              NID_WaitForUserInput|
				              NID_InitiateSearch|
				              NID_Move|
				              NID_DirectionalMovement
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_aflyToWayPoint, set_aflyToWayPoint, setL_aflyToWayPoint, setR_aflyToWayPoint: Coord
				channel get_aflyToAreaWayPoints, set_aflyToAreaWayPoints, setL_aflyToAreaWayPoints, setR_aflyToAreaWayPoints: AreaCoords
				channel get_adirectionalMovement, set_adirectionalMovement, setL_adirectionalMovement, setR_adirectionalMovement: Direction
				channel get_asearchType, set_asearchType, setL_asearchType, setR_asearchType: SearchType
				channel get_searchComplete, set_searchComplete, setL_searchComplete, setR_searchComplete: core_boolean
				channel get_droneOn, set_droneOn, setL_droneOn, setR_droneOn: core_boolean
				
				-- Shared variable channels
				channel set_EXT_droneOn: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel FollowPlan__: NIDS.InOut.SearchType
				channel FollowPlan: InOut.SearchType
				channel MoveDrone__: NIDS.InOut.Direction
				channel MoveDrone: InOut.Direction
				channel FlyToCoordinate__: NIDS.InOut.Coord
				channel FlyToCoordinate: InOut.Coord
				channel FlyToAreaCoordinates__: NIDS.InOut.AreaCoords
				channel FlyToAreaCoordinates: InOut.AreaCoords
				channel DroneStopSearch__: NIDS.InOut
				channel DroneStopSearch: InOut
				
				-- Declaring call and ret events for undefined operations
				channel initSearchCall: SearchType
				channel directionMovementCall: Direction
				channel movementCall: Coord
				
				enterSS = {|
				i0::enter,
				f0::enter,
				s0::enter,
				WaitForUserInput::enter,
				InitiateSearch::enter,
				Move::enter,
				DirectionalMovement::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				s0::entered,
				WaitForUserInput::entered,
				InitiateSearch::entered,
				Move::entered,
				DirectionalMovement::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_droneOn
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_droneOn, set_droneOn
				,	FollowPlan,
					MoveDrone,
					FlyToCoordinate,
					FlyToAreaCoordinates,
					DroneStopSearch
				,	initSearchCall,
					directionMovementCall,
					movementCall
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_Move : core_clock_type 
				channel get_CLID_s0 : core_clock_type 
				channel get_CLID_f0 : core_clock_type 
				channel get_CLID_WaitForUserInput : core_clock_type 
				channel get_CLID_DirectionalMovement : core_clock_type 
				channel get_CLID_InitiateSearch : core_clock_type 
				--channel increment__
				
				CLID_Move_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_s0_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_f0_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_WaitForUserInput_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_DirectionalMovement_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_InitiateSearch_clock_type(id__,
						          const_MovementStm_movementTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_MovementStm_movementTime) = D__(id__,
									    const_MovementStm_movementTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = D__(id__,
									    const_MovementStm_movementTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_MovementStm_movementTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: WaitForUserInput
					module WaitForUserInput
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_MovementStm_movementTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: InitiateSearch
					module InitiateSearch
					
					enterSS = 
							{|			i0::enter,
								WaitForUserInput::enter,
								AreaSearch::enter,
								Move::enter,
								s0::enter
							|}
					enteredSS = 
							{|			WaitForUserInput::entered,
								AreaSearch::entered,
								Move::entered,
								s0::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_WaitForUserInput|
						              NID_AreaSearch|
						              NID_Move|
						              NID_s0
						
						channel internal__ : NIDS
						channel FollowPlan__: NIDS.InOut.SearchType
						channel MoveDrone__: NIDS.InOut.Direction
						channel FlyToCoordinate__: NIDS.InOut.Coord
						channel FlyToAreaCoordinates__: NIDS.InOut.AreaCoords
						channel DroneStopSearch__: NIDS.InOut
						
						channel get_CLID_WaitForUserInput : core_clock_type 
						channel get_CLID_AreaSearch : core_clock_type 
						channel get_CLID_Move : core_clock_type 
						channel get_CLID_s0 : core_clock_type 
						--channel increment__
						
						CLID_WaitForUserInput_clock_type(id__,
								          const_MovementStm_movementTime) = 
							let
								max = (clock_type_max(Union({
						{}
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						CLID_AreaSearch_clock_type(id__,
								          const_MovementStm_movementTime) = 
							let
								max = (clock_type_max(Union({
						{}
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						CLID_Move_clock_type(id__,
								          const_MovementStm_movementTime) = 
							let
								max = (clock_type_max(Union({
						{}
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						CLID_s0_clock_type(id__,
								          const_MovementStm_movementTime) = 
							let
								max = (clock_type_max(Union({
						{}
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_MovementStm_movementTime) = D__(id__,
										    const_MovementStm_movementTime)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: WaitForUserInput
						module WaitForUserInput
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(true & (share__choice(set_searchComplete!false -> SKIP))) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(true & (share__choice(set_searchComplete!false -> SKIP))) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__,
										          const_MovementStm_movementTime) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: AreaSearch
						module AreaSearch
						
						enterSS = 
								{|			i0::enter,
									s0::enter,
									s1::enter,
									s2::enter,
									s3::enter,
									s4::enter,
									f0::enter
								|}
						enteredSS = 
								{|			s0::entered,
									s1::entered,
									s2::entered,
									s3::entered,
									s4::entered,
									f0::entered
								|}
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							-- declaring identifiers of transitions
							datatype NIDS = 
							              NID_i0|
							              NID_s0|
							              NID_s1|
							              NID_s2|
							              NID_s3|
							              NID_s4|
							              NID_f0
							
							channel internal__ : NIDS
							channel FollowPlan__: NIDS.InOut.SearchType
							channel MoveDrone__: NIDS.InOut.Direction
							channel FlyToCoordinate__: NIDS.InOut.Coord
							channel FlyToAreaCoordinates__: NIDS.InOut.AreaCoords
							channel DroneStopSearch__: NIDS.InOut
							
							channel get_CLID_s1 : core_clock_type 
							channel get_CLID_s2 : core_clock_type 
							channel get_CLID_s4 : core_clock_type 
							channel get_CLID_s0 : core_clock_type 
							channel get_CLID_s3 : core_clock_type 
							--channel increment__
							
							CLID_s1_clock_type(id__,
									          const_MovementStm_movementTime) = 
								let
									max = (clock_type_max(Union({
							{}
							}))+1)
								ctype = {0..max}
							within
								if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
							
							CLID_s2_clock_type(id__,
									          const_MovementStm_movementTime) = 
								let
									max = (clock_type_max(Union({
							{}
							}))+1)
								ctype = {0..max}
							within
								if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
							
							CLID_s4_clock_type(id__,
									          const_MovementStm_movementTime) = 
								let
									max = (clock_type_max(Union({
							{}
							}))+1)
								ctype = {0..max}
							within
								if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
							
							CLID_s0_clock_type(id__,
									          const_MovementStm_movementTime) = 
								let
									max = (clock_type_max(Union({
							{}
							}))+1)
								ctype = {0..max}
							within
								if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
							
							CLID_s3_clock_type(id__,
									          const_MovementStm_movementTime) = 
								let
									max = (clock_type_max(Union({
							{}
							}))+1)
								ctype = {0..max}
							within
								if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
							
							
							--	Nodes
							-- declaring all nodes
							
							----------------------------------------------------------------------
							-- Initial: i0
							module i0
							exports
							
								channel enter, interrupt
								
								Timed(OneStep) {
									D__(id__,
											    const_MovementStm_movementTime) = 
										dbisim(let
											Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
											
											Termination = terminate -> SKIP
											
											Active 		= share__choice(interrupt -> SKIP) ; Inactive
										within
											Inactive [| {terminate} |> SKIP)
									
									VS_O__(id__,
											    const_MovementStm_movementTime) = D__(id__,
											    const_MovementStm_movementTime)
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- State: s0
							module s0
							
							enterSS = {}
							
							enteredSS = {}
							
							exports
							
								--  Declarations
								
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
												
								
								--channel increment__
								
								
								--	Nodes
								-- declaring all nodes
								
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									--  Note that FDR has problems with efficiently compiling the process below
									-- 	if using a different recursion pattern.
									D__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										-- IMPLEMENTATION NOTE: 
										-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
										-- however FDR struggles with that form in certain cases. So we use the exception operator
										-- instead to 'terminate'.
										
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
									
									
									-- Clocks
									
									StateClocks(id__,
											          const_MovementStm_movementTime) = terminate -> SKIP
									
									stateClockSync = {||}
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- State: s1
							module s1
							
							enterSS = {}
							
							enteredSS = {}
							
							exports
							
								--  Declarations
								
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
												
								
								--channel increment__
								
								
								--	Nodes
								-- declaring all nodes
								
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									--  Note that FDR has problems with efficiently compiling the process below
									-- 	if using a different recursion pattern.
									D__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										-- IMPLEMENTATION NOTE: 
										-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
										-- however FDR struggles with that form in certain cases. So we use the exception operator
										-- instead to 'terminate'.
										
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
									
									
									-- Clocks
									
									StateClocks(id__,
											          const_MovementStm_movementTime) = terminate -> SKIP
									
									stateClockSync = {||}
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- State: s2
							module s2
							
							enterSS = {}
							
							enteredSS = {}
							
							exports
							
								--  Declarations
								
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
												
								
								--channel increment__
								
								
								--	Nodes
								-- declaring all nodes
								
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									--  Note that FDR has problems with efficiently compiling the process below
									-- 	if using a different recursion pattern.
									D__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										-- IMPLEMENTATION NOTE: 
										-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
										-- however FDR struggles with that form in certain cases. So we use the exception operator
										-- instead to 'terminate'.
										
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
									
									
									-- Clocks
									
									StateClocks(id__,
											          const_MovementStm_movementTime) = terminate -> SKIP
									
									stateClockSync = {||}
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- State: s3
							module s3
							
							enterSS = {}
							
							enteredSS = {}
							
							exports
							
								--  Declarations
								
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
												
								
								--channel increment__
								
								
								--	Nodes
								-- declaring all nodes
								
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									--  Note that FDR has problems with efficiently compiling the process below
									-- 	if using a different recursion pattern.
									D__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										-- IMPLEMENTATION NOTE: 
										-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
										-- however FDR struggles with that form in certain cases. So we use the exception operator
										-- instead to 'terminate'.
										
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
									
									
									-- Clocks
									
									StateClocks(id__,
											          const_MovementStm_movementTime) = terminate -> SKIP
									
									stateClockSync = {||}
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- State: s4
							module s4
							
							enterSS = {}
							
							enteredSS = {}
							
							exports
							
								--  Declarations
								
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
												
								
								--channel increment__
								
								
								--	Nodes
								-- declaring all nodes
								
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									--  Note that FDR has problems with efficiently compiling the process below
									-- 	if using a different recursion pattern.
									D__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										-- IMPLEMENTATION NOTE: 
										-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
										-- however FDR struggles with that form in certain cases. So we use the exception operator
										-- instead to 'terminate'.
										
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= SKIP ; 
												 	  Behaviour ; 
												 	  share__choice(exit -> SKIP) ; SKIP ; 
												 	  share__choice(exited -> SKIP) ; Inactive
									
										Behaviour 	= entered -> During
										During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
									within
										Inactive [| {terminate} |> SKIP)
									
									
									-- Clocks
									
									StateClocks(id__,
											          const_MovementStm_movementTime) = terminate -> SKIP
									
									stateClockSync = {||}
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							----------------------------------------------------------------------
							-- Final state: f0
							module f0
							
							exports
							
								channel enter, entered, interrupt
								channel enteredL, enteredR
								
								Timed(OneStep) {
									--	Rule: behaviours(Node)
									D__(id__,
											    const_MovementStm_movementTime) = 
										dbisim(let
											Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
											
											Entering 	= entered -> SKIP ; Active
											Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
											Interrupted	= share__choice(exit -> exited -> Inactive)
										within
											Inactive [| {terminate} |> SKIP)
										
									VS_O__(id__,
											    const_MovementStm_movementTime) = D__(id__,
											    const_MovementStm_movementTime)
								}
							
							endmodule
							----------------------------------------------------------------------
							
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
								
									Behaviour 	= dbisim(
										((
										 (((dbisim(
										 	sbisim(
										 		dbisim(
										 			sbisim(
										 				dbisim(
										 					sbisim(
										 						dbisim(
										 							sbisim(
										 								dbisim(
										 									sbisim(
										 										(let
										 											-- IMPLEMENTATION NOTE:
										 											-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
										 											-- modules for defining the semantics of each node.
										 											enterSS = {|
										 											i0::enter,
										 											s0::enter,
										 											s1::enter,
										 											s2::enter,
										 											s3::enter,
										 											s4::enter,
										 											f0::enter
										 											|}
										 											hideSet = union(enterSS,{|exit,exited,internal__|})
										 										within 
										 											((let
										 												-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
										 												-- because CSPM modules are used for the semantics of Node.
										 												flowevts = union(enterSS,{|exit,exited,interrupt|})
										 												transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s1,internal__.NID_s2,internal__.NID_s3,internal__.NID_s4|}
										 											within
										 												((
										 												 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
										 												   i0::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s0::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s1::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s2::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s3::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s4::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   f0::D__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   )
										 												   )
										 												   )
										 												   )
										 												   )
										 												   )
										 												 )
										 												 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
										 												 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
										 												 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
										 												 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3|}]]
										 												 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4|}]]
										 												 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
										 												 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
										 												 )
										 												  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
										 												  [[set_droneOn <- setL_droneOn]]
										 												 )
										 												 [| union(union(union(flowevts,transSync),{terminate}),{|share__
										 												 			,setL_droneOn
										 												|}) |]
										 												 ((i0::enter -> Transitions(id__,
										 												 		    const_MovementStm_movementTime))
										 												  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
										 												 )
										 												)[[setL_droneOn <- set_droneOn]]
										 												)
										 											)
										 											 \ hideSet)
										 											[[
										 												FollowPlan__.x____ <- FollowPlan,
										 												MoveDrone__.x____ <- MoveDrone,
										 												FlyToCoordinate__.x____ <- FlyToCoordinate,
										 												FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
										 												DroneStopSearch__.x____ <- DroneStopSearch
										 												| x____ <- NIDS
										 											]]
										 										)
										 										[| {|get_CLID_s3,s3::entered,terminate|} |]
										 										dbisim(Clock_CLID_s3(id__,0,
										 												          const_MovementStm_movementTime))
										 									)\{|get_CLID_s3|}
										 								)
										 								[| {|get_CLID_s0,s0::entered,terminate|} |]
										 								dbisim(Clock_CLID_s0(id__,0,
										 										          const_MovementStm_movementTime))
										 							)\{|get_CLID_s0|}
										 						)
										 						[| {|get_CLID_s4,s4::entered,terminate|} |]
										 						dbisim(Clock_CLID_s4(id__,0,
										 								          const_MovementStm_movementTime))
										 					)\{|get_CLID_s4|}
										 				)
										 				[| {|get_CLID_s2,s2::entered,terminate|} |]
										 				dbisim(Clock_CLID_s2(id__,0,
										 						          const_MovementStm_movementTime))
										 			)\{|get_CLID_s2|}
										 		)
										 		[| {|get_CLID_s1,s1::entered,terminate|} |]
										 		dbisim(Clock_CLID_s1(id__,0,
										 				          const_MovementStm_movementTime))
										 	)\{|get_CLID_s1|}
										 )
										 ))
										  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement,setR_aflyToAreaWayPoints,setR_droneOn,setR_searchComplete |} ]] 
										  [[set_asearchType <- setL_asearchType,set_aflyToWayPoint <- setL_aflyToWayPoint,set_adirectionalMovement <- setL_adirectionalMovement,set_aflyToAreaWayPoints <- setL_aflyToAreaWayPoints,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
										 )
										 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
										 			,setL_asearchType
										 			,setL_aflyToWayPoint
										 			,setL_adirectionalMovement
										 			,setL_aflyToAreaWayPoints
										 			,setL_droneOn
										 			,setL_searchComplete
										 			,setR_asearchType
										 			 			,setR_aflyToWayPoint
										 			 			,setR_adirectionalMovement
										 			 			,setR_aflyToAreaWayPoints
										 			 			,setR_droneOn
										 			 			,setR_searchComplete
										 			|}) |]
										 ((During)
										  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_aflyToWayPoint,setL_adirectionalMovement,setL_aflyToAreaWayPoints,setL_droneOn,setL_searchComplete |} ]]
										  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints,set_droneOn <- setR_droneOn,set_searchComplete <- setR_searchComplete]]
										 )
										)[[setL_asearchType <- set_asearchType,setL_aflyToWayPoint <- set_aflyToWayPoint,setL_adirectionalMovement <- set_adirectionalMovement,setL_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
										 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setR_droneOn <- set_droneOn,setR_searchComplete <- set_searchComplete]]
										)\union(enteredSS,{terminate}) 
									)
									During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
											 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
								
									Behaviour 	= dbisim(
										((
										 (((dbisim(
										 	sbisim(
										 		dbisim(
										 			sbisim(
										 				dbisim(
										 					sbisim(
										 						dbisim(
										 							sbisim(
										 								dbisim(
										 									sbisim(
										 										(let
										 											-- IMPLEMENTATION NOTE:
										 											-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
										 											-- modules for defining the semantics of each node.
										 											enterSS = {|
										 											i0::enter,
										 											s0::enter,
										 											s1::enter,
										 											s2::enter,
										 											s3::enter,
										 											s4::enter,
										 											f0::enter
										 											|}
										 											hideSet = union(enterSS,{|exit,exited,internal__|})
										 										within 
										 											((let
										 												-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
										 												-- because CSPM modules are used for the semantics of Node.
										 												flowevts = union(enterSS,{|exit,exited,interrupt|})
										 												transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s1,internal__.NID_s2,internal__.NID_s3,internal__.NID_s4|}
										 											within
										 												((
										 												 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
										 												   i0::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s0::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s1::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s2::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s3::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   s4::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   [| { share__, terminate } |] (
										 												   f0::VS_O__(id__,
										 												   		    const_MovementStm_movementTime)
										 												   )
										 												   )
										 												   )
										 												   )
										 												   )
										 												   )
										 												 )
										 												 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
										 												 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
										 												 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
										 												 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3|}]]
										 												 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4|}]]
										 												 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
										 												 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
										 												 )
										 												  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
										 												  [[set_droneOn <- setL_droneOn]]
										 												 )
										 												 [| union(union(union(flowevts,transSync),{terminate}),{|share__
										 												 			,setL_droneOn
										 												|}) |]
										 												 ((i0::enter -> Transitions(id__,
										 												 		    const_MovementStm_movementTime))
										 												  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
										 												 )
										 												)[[setL_droneOn <- set_droneOn]]
										 												)
										 											)
										 											 \ hideSet)
										 											[[
										 												FollowPlan__.x____ <- FollowPlan,
										 												MoveDrone__.x____ <- MoveDrone,
										 												FlyToCoordinate__.x____ <- FlyToCoordinate,
										 												FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
										 												DroneStopSearch__.x____ <- DroneStopSearch
										 												| x____ <- NIDS
										 											]]
										 										)
										 										[| {|get_CLID_s3,s3::entered,terminate|} |]
										 										dbisim(Clock_CLID_s3(id__,0,
										 												          const_MovementStm_movementTime))
										 									)\{|get_CLID_s3|}
										 								)
										 								[| {|get_CLID_s0,s0::entered,terminate|} |]
										 								dbisim(Clock_CLID_s0(id__,0,
										 										          const_MovementStm_movementTime))
										 							)\{|get_CLID_s0|}
										 						)
										 						[| {|get_CLID_s4,s4::entered,terminate|} |]
										 						dbisim(Clock_CLID_s4(id__,0,
										 								          const_MovementStm_movementTime))
										 					)\{|get_CLID_s4|}
										 				)
										 				[| {|get_CLID_s2,s2::entered,terminate|} |]
										 				dbisim(Clock_CLID_s2(id__,0,
										 						          const_MovementStm_movementTime))
										 			)\{|get_CLID_s2|}
										 		)
										 		[| {|get_CLID_s1,s1::entered,terminate|} |]
										 		dbisim(Clock_CLID_s1(id__,0,
										 				          const_MovementStm_movementTime))
										 	)\{|get_CLID_s1|}
										 )
										 ))
										  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement,setR_aflyToAreaWayPoints,setR_droneOn,setR_searchComplete |} ]] 
										  [[set_asearchType <- setL_asearchType,set_aflyToWayPoint <- setL_aflyToWayPoint,set_adirectionalMovement <- setL_adirectionalMovement,set_aflyToAreaWayPoints <- setL_aflyToAreaWayPoints,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
										 )
										 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
										 			,setL_asearchType
										 			,setL_aflyToWayPoint
										 			,setL_adirectionalMovement
										 			,setL_aflyToAreaWayPoints
										 			,setL_droneOn
										 			,setL_searchComplete
										 			,setR_asearchType
										 			 			,setR_aflyToWayPoint
										 			 			,setR_adirectionalMovement
										 			 			,setR_aflyToAreaWayPoints
										 			 			,setR_droneOn
										 			 			,setR_searchComplete
										 			|}) |]
										 ((During)
										  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_aflyToWayPoint,setL_adirectionalMovement,setL_aflyToAreaWayPoints,setL_droneOn,setL_searchComplete |} ]]
										  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints,set_droneOn <- setR_droneOn,set_searchComplete <- setR_searchComplete]]
										 )
										)[[setL_asearchType <- set_asearchType,setL_aflyToWayPoint <- set_aflyToWayPoint,setL_adirectionalMovement <- set_adirectionalMovement,setL_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
										 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setR_droneOn <- set_droneOn,setR_searchComplete <- set_searchComplete]]
										)\{terminate} 
									)
									During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
											 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
								within
									Inactive [| {terminate} |> SKIP)
								
								Transitions(id__,
										    const_MovementStm_movementTime) = ((let
									Trans = share__choice(get_droneOn?droneOn -> TimeOut_1(
										 (share__ -> SKIP
										 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
										 [] dbisim((droneOn)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_aflyToAreaWayPoints?aflyToAreaWayPoints -> true&CALL__movement(
										 			id__,
										 		    const_MovementStm_movementTime,
										 			AreaCoords_Corner1(aflyToAreaWayPoints)
										 		));SHARE_WAIT(const_MovementStm_movementTime) ; s1::enter -> SKIP)))
										 [] dbisim((droneOn)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_aflyToAreaWayPoints?aflyToAreaWayPoints -> true&CALL__movement(
										 			id__,
										 		    const_MovementStm_movementTime,
										 			AreaCoords_Corner2(aflyToAreaWayPoints)
										 		));SHARE_WAIT(const_MovementStm_movementTime) ; s2::enter -> SKIP)))
										 [] dbisim((droneOn)&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_aflyToAreaWayPoints?aflyToAreaWayPoints -> true&CALL__movement(
										 			id__,
										 		    const_MovementStm_movementTime,
										 			AreaCoords_Corner3(aflyToAreaWayPoints)
										 		));SHARE_WAIT(const_MovementStm_movementTime) ; s3::enter -> SKIP)))
										 [] dbisim((droneOn)&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_aflyToAreaWayPoints?aflyToAreaWayPoints -> true&CALL__movement(
										 			id__,
										 		    const_MovementStm_movementTime,
										 			AreaCoords_Corner4(aflyToAreaWayPoints)
										 		));SHARE_WAIT(const_MovementStm_movementTime) ; s4::enter -> SKIP)))
										 [] dbisim((droneOn)&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_aflyToAreaWayPoints?aflyToAreaWayPoints -> true&CALL__movement(
										 			id__,
										 		    const_MovementStm_movementTime,
										 			AreaCoords_Corner1(aflyToAreaWayPoints)
										 		));SHARE_WAIT(const_MovementStm_movementTime);share__choice(true & (share__choice(set_searchComplete!true -> SKIP))) ; f0::enter -> SKIP)))
										 []
										 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
										 []
										 terminate -> SKIP
										 )
									,SKIP);Trans
									)
								within
									Trans [|{terminate}|> SKIP
								)
								)
								
								
								-- Clocks
								Clock_CLID_s1(id__,x__,
										          const_MovementStm_movementTime) = 
									TimeOut_1(
										s1::entered -> Clock_CLID_s1(id__,0,
												          const_MovementStm_movementTime)
										[]
										get_CLID_s1!x__ -> Clock_CLID_s1(id__,x__,
												          const_MovementStm_movementTime)
										[]
										terminate -> SKIP,Clock_CLID_s1(id__,clock_type_plus(x__,1,CLID_s1_clock_type(id__,
												          const_MovementStm_movementTime)),
												          const_MovementStm_movementTime))
								Clock_CLID_s2(id__,x__,
										          const_MovementStm_movementTime) = 
									TimeOut_1(
										s2::entered -> Clock_CLID_s2(id__,0,
												          const_MovementStm_movementTime)
										[]
										get_CLID_s2!x__ -> Clock_CLID_s2(id__,x__,
												          const_MovementStm_movementTime)
										[]
										terminate -> SKIP,Clock_CLID_s2(id__,clock_type_plus(x__,1,CLID_s2_clock_type(id__,
												          const_MovementStm_movementTime)),
												          const_MovementStm_movementTime))
								Clock_CLID_s4(id__,x__,
										          const_MovementStm_movementTime) = 
									TimeOut_1(
										s4::entered -> Clock_CLID_s4(id__,0,
												          const_MovementStm_movementTime)
										[]
										get_CLID_s4!x__ -> Clock_CLID_s4(id__,x__,
												          const_MovementStm_movementTime)
										[]
										terminate -> SKIP,Clock_CLID_s4(id__,clock_type_plus(x__,1,CLID_s4_clock_type(id__,
												          const_MovementStm_movementTime)),
												          const_MovementStm_movementTime))
								Clock_CLID_s0(id__,x__,
										          const_MovementStm_movementTime) = 
									TimeOut_1(
										s0::entered -> Clock_CLID_s0(id__,0,
												          const_MovementStm_movementTime)
										[]
										get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
												          const_MovementStm_movementTime)
										[]
										terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
												          const_MovementStm_movementTime)),
												          const_MovementStm_movementTime))
								Clock_CLID_s3(id__,x__,
										          const_MovementStm_movementTime) = 
									TimeOut_1(
										s3::entered -> Clock_CLID_s3(id__,0,
												          const_MovementStm_movementTime)
										[]
										get_CLID_s3!x__ -> Clock_CLID_s3(id__,x__,
												          const_MovementStm_movementTime)
										[]
										terminate -> SKIP,Clock_CLID_s3(id__,clock_type_plus(x__,1,CLID_s3_clock_type(id__,
												          const_MovementStm_movementTime)),
												          const_MovementStm_movementTime))
								
								StateClocks(id__,
										          const_MovementStm_movementTime) = dbisim(Clock_CLID_s1(id__,0,
										          const_MovementStm_movementTime))
								[| { terminate } |] (
								dbisim(Clock_CLID_s2(id__,0,
										          const_MovementStm_movementTime))
								[| { terminate } |] (
								dbisim(Clock_CLID_s4(id__,0,
										          const_MovementStm_movementTime))
								[| { terminate } |] (
								dbisim(Clock_CLID_s0(id__,0,
										          const_MovementStm_movementTime))
								[| { terminate } |] (
								dbisim(Clock_CLID_s3(id__,0,
										          const_MovementStm_movementTime))
								)
								)
								)
								)
								
								stateClockSync = {|get_CLID_s1,s1::entered,get_CLID_s2,s2::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered,get_CLID_s3,s3::entered|}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: Move
						module Move
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(get_aflyToWayPoint?aflyToWayPoint -> true&CALL__movement(
												id__,
											    const_MovementStm_movementTime,
												aflyToWayPoint
											));SHARE_WAIT(const_MovementStm_movementTime) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(get_aflyToWayPoint?aflyToWayPoint -> true&CALL__movement(
												id__,
											    const_MovementStm_movementTime,
												aflyToWayPoint
											));SHARE_WAIT(const_MovementStm_movementTime) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__,
										          const_MovementStm_movementTime) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_MovementStm_movementTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__,
										          const_MovementStm_movementTime) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		dbisim(
									 			sbisim(
									 				dbisim(
									 					sbisim(
									 						dbisim(
									 							sbisim(
									 								(let
									 									-- IMPLEMENTATION NOTE:
									 									-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 									-- modules for defining the semantics of each node.
									 									enterSS = {|
									 									i0::enter,
									 									WaitForUserInput::enter,
									 									AreaSearch::enter,
									 									Move::enter,
									 									s0::enter
									 									|}
									 									hideSet = union(enterSS,{|exit,exited,internal__|})
									 								within 
									 									((let
									 										-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 										-- because CSPM modules are used for the semantics of Node.
									 										flowevts = union(enterSS,{|exit,exited,interrupt|})
									 										transSync = {|internal__.NID_s0,FlyToAreaCoordinates__.NID_WaitForUserInput.in,internal__.NID_AreaSearch,internal__.NID_Move,FlyToCoordinate__.NID_WaitForUserInput.in,internal__.NID_i0|}
									 									within
									 										((
									 										 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 										   i0::D__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   WaitForUserInput::D__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   AreaSearch::D__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   Move::D__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   s0::D__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   )
									 										   )
									 										   )
									 										   )
									 										 )
									 										 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,FlyToAreaCoordinates__.NID_WaitForUserInput.in,FlyToCoordinate__.NID_WaitForUserInput.in|}]]
									 										 [[AreaSearch::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AreaSearch|}]]
									 										 [[Move::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Move|}]]
									 										 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 										 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 										 )
									 										  [[ share__ <- x__ | x__ <- {| share__,setR_aflyToWayPoint,setR_aflyToAreaWayPoints |} ]] 
									 										  [[set_asearchType <- setL_asearchType,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
									 										 )
									 										 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 										 			,setL_asearchType
									 										 			,setL_droneOn
									 										 			,setL_searchComplete
									 										 			,setR_aflyToWayPoint
									 										 			 			,setR_aflyToAreaWayPoints
									 										 			|}) |]
									 										 ((i0::enter -> Transitions(id__,
									 										 		    const_MovementStm_movementTime))
									 										  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_droneOn,setL_searchComplete |} ]]
									 										  [[set_aflyToWayPoint <- setR_aflyToWayPoint,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints]]
									 										 )
									 										)[[setL_asearchType <- set_asearchType,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
									 										 [[setR_aflyToWayPoint <- set_aflyToWayPoint,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints]]
									 										)
									 									)
									 									 \ hideSet)
									 									[[
									 										FollowPlan__.x____ <- FollowPlan,
									 										MoveDrone__.x____ <- MoveDrone,
									 										FlyToCoordinate__.x____ <- FlyToCoordinate,
									 										FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
									 										DroneStopSearch__.x____ <- DroneStopSearch
									 										| x____ <- NIDS
									 									]]
									 								)
									 								[| {|get_CLID_s0,s0::entered,terminate|} |]
									 								dbisim(Clock_CLID_s0(id__,0,
									 										          const_MovementStm_movementTime))
									 							)\{|get_CLID_s0|}
									 						)
									 						[| {|get_CLID_Move,Move::entered,terminate|} |]
									 						dbisim(Clock_CLID_Move(id__,0,
									 								          const_MovementStm_movementTime))
									 					)\{|get_CLID_Move|}
									 				)
									 				[| {|get_CLID_AreaSearch,AreaSearch::entered,terminate|} |]
									 				dbisim(Clock_CLID_AreaSearch(id__,0,
									 						          const_MovementStm_movementTime))
									 			)\{|get_CLID_AreaSearch|}
									 		)
									 		[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
									 		dbisim(Clock_CLID_WaitForUserInput(id__,0,
									 				          const_MovementStm_movementTime))
									 	)\{|get_CLID_WaitForUserInput|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement,setR_aflyToAreaWayPoints,setR_droneOn,setR_searchComplete |} ]] 
									  [[set_asearchType <- setL_asearchType,set_aflyToWayPoint <- setL_aflyToWayPoint,set_adirectionalMovement <- setL_adirectionalMovement,set_aflyToAreaWayPoints <- setL_aflyToAreaWayPoints,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_asearchType
									 			,setL_aflyToWayPoint
									 			,setL_adirectionalMovement
									 			,setL_aflyToAreaWayPoints
									 			,setL_droneOn
									 			,setL_searchComplete
									 			,setR_asearchType
									 			 			,setR_aflyToWayPoint
									 			 			,setR_adirectionalMovement
									 			 			,setR_aflyToAreaWayPoints
									 			 			,setR_droneOn
									 			 			,setR_searchComplete
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_aflyToWayPoint,setL_adirectionalMovement,setL_aflyToAreaWayPoints,setL_droneOn,setL_searchComplete |} ]]
									  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints,set_droneOn <- setR_droneOn,set_searchComplete <- setR_searchComplete]]
									 )
									)[[setL_asearchType <- set_asearchType,setL_aflyToWayPoint <- set_aflyToWayPoint,setL_adirectionalMovement <- set_adirectionalMovement,setL_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
									 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setR_droneOn <- set_droneOn,setR_searchComplete <- set_searchComplete]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		dbisim(
									 			sbisim(
									 				dbisim(
									 					sbisim(
									 						dbisim(
									 							sbisim(
									 								(let
									 									-- IMPLEMENTATION NOTE:
									 									-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 									-- modules for defining the semantics of each node.
									 									enterSS = {|
									 									i0::enter,
									 									WaitForUserInput::enter,
									 									AreaSearch::enter,
									 									Move::enter,
									 									s0::enter
									 									|}
									 									hideSet = union(enterSS,{|exit,exited,internal__|})
									 								within 
									 									((let
									 										-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 										-- because CSPM modules are used for the semantics of Node.
									 										flowevts = union(enterSS,{|exit,exited,interrupt|})
									 										transSync = {|internal__.NID_s0,FlyToAreaCoordinates__.NID_WaitForUserInput.in,internal__.NID_AreaSearch,internal__.NID_Move,FlyToCoordinate__.NID_WaitForUserInput.in,internal__.NID_i0|}
									 									within
									 										((
									 										 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 										   i0::VS_O__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   WaitForUserInput::VS_O__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   AreaSearch::VS_O__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   Move::VS_O__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   [| { share__, terminate } |] (
									 										   s0::VS_O__(id__,
									 										   		    const_MovementStm_movementTime)
									 										   )
									 										   )
									 										   )
									 										   )
									 										 )
									 										 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,FlyToAreaCoordinates__.NID_WaitForUserInput.in,FlyToCoordinate__.NID_WaitForUserInput.in|}]]
									 										 [[AreaSearch::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AreaSearch|}]]
									 										 [[Move::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Move|}]]
									 										 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 										 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 										 )
									 										  [[ share__ <- x__ | x__ <- {| share__,setR_aflyToWayPoint,setR_aflyToAreaWayPoints |} ]] 
									 										  [[set_asearchType <- setL_asearchType,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
									 										 )
									 										 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 										 			,setL_asearchType
									 										 			,setL_droneOn
									 										 			,setL_searchComplete
									 										 			,setR_aflyToWayPoint
									 										 			 			,setR_aflyToAreaWayPoints
									 										 			|}) |]
									 										 ((i0::enter -> Transitions(id__,
									 										 		    const_MovementStm_movementTime))
									 										  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_droneOn,setL_searchComplete |} ]]
									 										  [[set_aflyToWayPoint <- setR_aflyToWayPoint,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints]]
									 										 )
									 										)[[setL_asearchType <- set_asearchType,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
									 										 [[setR_aflyToWayPoint <- set_aflyToWayPoint,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints]]
									 										)
									 									)
									 									 \ hideSet)
									 									[[
									 										FollowPlan__.x____ <- FollowPlan,
									 										MoveDrone__.x____ <- MoveDrone,
									 										FlyToCoordinate__.x____ <- FlyToCoordinate,
									 										FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
									 										DroneStopSearch__.x____ <- DroneStopSearch
									 										| x____ <- NIDS
									 									]]
									 								)
									 								[| {|get_CLID_s0,s0::entered,terminate|} |]
									 								dbisim(Clock_CLID_s0(id__,0,
									 										          const_MovementStm_movementTime))
									 							)\{|get_CLID_s0|}
									 						)
									 						[| {|get_CLID_Move,Move::entered,terminate|} |]
									 						dbisim(Clock_CLID_Move(id__,0,
									 								          const_MovementStm_movementTime))
									 					)\{|get_CLID_Move|}
									 				)
									 				[| {|get_CLID_AreaSearch,AreaSearch::entered,terminate|} |]
									 				dbisim(Clock_CLID_AreaSearch(id__,0,
									 						          const_MovementStm_movementTime))
									 			)\{|get_CLID_AreaSearch|}
									 		)
									 		[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
									 		dbisim(Clock_CLID_WaitForUserInput(id__,0,
									 				          const_MovementStm_movementTime))
									 	)\{|get_CLID_WaitForUserInput|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement,setR_aflyToAreaWayPoints,setR_droneOn,setR_searchComplete |} ]] 
									  [[set_asearchType <- setL_asearchType,set_aflyToWayPoint <- setL_aflyToWayPoint,set_adirectionalMovement <- setL_adirectionalMovement,set_aflyToAreaWayPoints <- setL_aflyToAreaWayPoints,set_droneOn <- setL_droneOn,set_searchComplete <- setL_searchComplete]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_asearchType
									 			,setL_aflyToWayPoint
									 			,setL_adirectionalMovement
									 			,setL_aflyToAreaWayPoints
									 			,setL_droneOn
									 			,setL_searchComplete
									 			,setR_asearchType
									 			 			,setR_aflyToWayPoint
									 			 			,setR_adirectionalMovement
									 			 			,setR_aflyToAreaWayPoints
									 			 			,setR_droneOn
									 			 			,setR_searchComplete
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_asearchType,setL_aflyToWayPoint,setL_adirectionalMovement,setL_aflyToAreaWayPoints,setL_droneOn,setL_searchComplete |} ]]
									  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement,set_aflyToAreaWayPoints <- setR_aflyToAreaWayPoints,set_droneOn <- setR_droneOn,set_searchComplete <- setR_searchComplete]]
									 )
									)[[setL_asearchType <- set_asearchType,setL_aflyToWayPoint <- set_aflyToWayPoint,setL_adirectionalMovement <- set_adirectionalMovement,setL_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setL_droneOn <- set_droneOn,setL_searchComplete <- set_searchComplete]]
									 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement,setR_aflyToAreaWayPoints <- set_aflyToAreaWayPoints,setR_droneOn <- set_droneOn,setR_searchComplete <- set_searchComplete]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_MovementStm_movementTime) = ((let
								Trans = share__choice(get_asearchType?asearchType -> get_droneOn?droneOn -> get_searchComplete?searchComplete -> TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((droneOn)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
									 [] dbisim((FlyToAreaCoordinates__!NID_WaitForUserInput.in?aflyToAreaWayPoints:{aflyToAreaWayPoints|aflyToAreaWayPoints <- AreaCoords, (droneOn and (asearchType==SearchType_AreaSearch))} -> share__choice(set_aflyToAreaWayPoints!aflyToAreaWayPoints -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; AreaSearch::enter -> SKIP)))
									 [] dbisim(((searchComplete==true))&(internal__!NID_AreaSearch -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
									 [] dbisim((true)&(internal__!NID_Move -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
									 [] dbisim((FlyToCoordinate__!NID_WaitForUserInput.in?aflyToWayPoint:{aflyToWayPoint|aflyToWayPoint <- Coord, droneOn} -> share__choice(set_aflyToWayPoint!aflyToWayPoint -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Move::enter -> SKIP)))
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
									 []
									 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
								)
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_WaitForUserInput(id__,x__,
									          const_MovementStm_movementTime) = 
								TimeOut_1(
									WaitForUserInput::entered -> Clock_CLID_WaitForUserInput(id__,0,
											          const_MovementStm_movementTime)
									[]
									get_CLID_WaitForUserInput!x__ -> Clock_CLID_WaitForUserInput(id__,x__,
											          const_MovementStm_movementTime)
									[]
									terminate -> SKIP,Clock_CLID_WaitForUserInput(id__,clock_type_plus(x__,1,CLID_WaitForUserInput_clock_type(id__,
											          const_MovementStm_movementTime)),
											          const_MovementStm_movementTime))
							Clock_CLID_AreaSearch(id__,x__,
									          const_MovementStm_movementTime) = 
								TimeOut_1(
									AreaSearch::entered -> Clock_CLID_AreaSearch(id__,0,
											          const_MovementStm_movementTime)
									[]
									get_CLID_AreaSearch!x__ -> Clock_CLID_AreaSearch(id__,x__,
											          const_MovementStm_movementTime)
									[]
									terminate -> SKIP,Clock_CLID_AreaSearch(id__,clock_type_plus(x__,1,CLID_AreaSearch_clock_type(id__,
											          const_MovementStm_movementTime)),
											          const_MovementStm_movementTime))
							Clock_CLID_Move(id__,x__,
									          const_MovementStm_movementTime) = 
								TimeOut_1(
									Move::entered -> Clock_CLID_Move(id__,0,
											          const_MovementStm_movementTime)
									[]
									get_CLID_Move!x__ -> Clock_CLID_Move(id__,x__,
											          const_MovementStm_movementTime)
									[]
									terminate -> SKIP,Clock_CLID_Move(id__,clock_type_plus(x__,1,CLID_Move_clock_type(id__,
											          const_MovementStm_movementTime)),
											          const_MovementStm_movementTime))
							Clock_CLID_s0(id__,x__,
									          const_MovementStm_movementTime) = 
								TimeOut_1(
									s0::entered -> Clock_CLID_s0(id__,0,
											          const_MovementStm_movementTime)
									[]
									get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
											          const_MovementStm_movementTime)
									[]
									terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
											          const_MovementStm_movementTime)),
											          const_MovementStm_movementTime))
							
							StateClocks(id__,
									          const_MovementStm_movementTime) = dbisim(Clock_CLID_WaitForUserInput(id__,0,
									          const_MovementStm_movementTime))
							[| { terminate } |] (
							dbisim(Clock_CLID_AreaSearch(id__,0,
									          const_MovementStm_movementTime))
							[| { terminate } |] (
							dbisim(Clock_CLID_Move(id__,0,
									          const_MovementStm_movementTime))
							[| { terminate } |] (
							dbisim(Clock_CLID_s0(id__,0,
									          const_MovementStm_movementTime))
							)
							)
							)
							
							stateClockSync = {|get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_AreaSearch,AreaSearch::entered,get_CLID_Move,Move::entered,get_CLID_s0,s0::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Move
					module Move
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(get_aflyToWayPoint?aflyToWayPoint -> true&CALL__movement(
											id__,
										    const_MovementStm_movementTime,
											aflyToWayPoint
										));SHARE_WAIT(const_MovementStm_movementTime) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(get_aflyToWayPoint?aflyToWayPoint -> true&CALL__movement(
											id__,
										    const_MovementStm_movementTime,
											aflyToWayPoint
										));SHARE_WAIT(const_MovementStm_movementTime) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_MovementStm_movementTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DirectionalMovement
					module DirectionalMovement
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(get_adirectionalMovement?adirectionalMovement -> true&CALL__directionMovement(
											id__,
										    const_MovementStm_movementTime,
											adirectionalMovement
										));SHARE_WAIT(const_MovementStm_movementTime) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_MovementStm_movementTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(get_adirectionalMovement?adirectionalMovement -> true&CALL__directionMovement(
											id__,
										    const_MovementStm_movementTime,
											adirectionalMovement
										));SHARE_WAIT(const_MovementStm_movementTime) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_MovementStm_movementTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__initSearch(id__,
							    const_MovementStm_movementTime,
								param_searchType) = EDeadline(initSearchCall.param_searchType,0)
					CALL__directionMovement(id__,
							    const_MovementStm_movementTime,
								param_direction) = EDeadline(directionMovementCall.param_direction,0)
					CALL__movement(id__,
							    const_MovementStm_movementTime,
								param_coord) = EDeadline(movementCall.param_coord,0)
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_MovementStm_movementTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_MovementStm_movementTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_MovementStm_movementTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_MovementStm_movementTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_MovementStm_movementTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_MovementStm_movementTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_MovementStm_movementTime) = ((let
						Trans = share__choice(get_droneOn?droneOn -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((droneOn)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_Move -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim((FlyToCoordinate__!NID_WaitForUserInput.in?aflyToWayPoint:{aflyToWayPoint|aflyToWayPoint <- Coord, droneOn} -> share__choice(set_aflyToWayPoint!aflyToWayPoint -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Move::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 [] dbisim((FollowPlan__!NID_WaitForUserInput.in?asearchType:{asearchType|asearchType <- SearchType, droneOn} -> share__choice(set_asearchType!asearchType -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; InitiateSearch::enter -> SKIP)))
							 [] dbisim((MoveDrone__!NID_WaitForUserInput.in?adirectionalMovement:{adirectionalMovement|adirectionalMovement <- Direction, droneOn} -> share__choice(set_adirectionalMovement!adirectionalMovement -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DirectionalMovement::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_DirectionalMovement -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim((true)&(DroneStopSearch__!NID_InitiateSearch.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim(((not (droneOn)))&(internal__!NID_WaitForUserInput -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 [] dbisim(((not (droneOn)))&(internal__!NID_InitiateSearch -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_MovementStm_movementTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								s0::enter,
								WaitForUserInput::enter,
								InitiateSearch::enter,
								Move::enter,
								DirectionalMovement::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_s0,internal__.NID_Move,FlyToCoordinate__.NID_WaitForUserInput.in,internal__.NID_i0,FollowPlan__.NID_WaitForUserInput.in,MoveDrone__.NID_WaitForUserInput.in,internal__.NID_DirectionalMovement,DroneStopSearch__.NID_InitiateSearch.in,internal__.NID_WaitForUserInput,internal__.NID_InitiateSearch|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   s0::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   WaitForUserInput::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   InitiateSearch::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   Move::D__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   DirectionalMovement::D__(id__,
									   		    const_MovementStm_movementTime)
									   )
									   )
									   )
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,FlyToCoordinate__.NID_WaitForUserInput.in,FollowPlan__.NID_WaitForUserInput.in,MoveDrone__.NID_WaitForUserInput.in,internal__.NID_WaitForUserInput|}]]
									 [[InitiateSearch::interrupt <- x__ | x__ <- {|interrupt,DroneStopSearch__.NID_InitiateSearch.in,internal__.NID_InitiateSearch|}]]
									 [[Move::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Move|}]]
									 [[DirectionalMovement::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DirectionalMovement|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement |} ]] 
									  [[set_droneOn <- setL_droneOn]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_droneOn
									 			,setR_asearchType
									 			 			,setR_aflyToWayPoint
									 			 			,setR_adirectionalMovement
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_MovementStm_movementTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
									  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement]]
									 )
									)[[setL_droneOn <- set_droneOn]]
									 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement]]
									)
								)
								 \ hideSet)
								[[
									FollowPlan__.x____ <- FollowPlan,
									MoveDrone__.x____ <- MoveDrone,
									FlyToCoordinate__.x____ <- FlyToCoordinate,
									FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
									DroneStopSearch__.x____ <- DroneStopSearch
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_MovementStm_movementTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_MovementStm_movementTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Move,Move::entered,get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_DirectionalMovement,DirectionalMovement::entered,get_CLID_InitiateSearch,InitiateSearch::entered|}
						 within
							(MachineBody(id__,
									    const_MovementStm_movementTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_MovementStm_movementTime)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_MovementStm_movementTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Move,Move::entered,get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_DirectionalMovement,DirectionalMovement::entered,get_CLID_InitiateSearch,InitiateSearch::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	MachineBody(id__,
																			    const_MovementStm_movementTime)
																	[| {|get_CLID_InitiateSearch,InitiateSearch::entered,terminate|} |]
																	dbisim(Clock_CLID_InitiateSearch(id__,0,
																			          const_MovementStm_movementTime))
																)\{|get_CLID_InitiateSearch|}
															)
															[| {|get_CLID_DirectionalMovement,DirectionalMovement::entered,terminate|} |]
															dbisim(Clock_CLID_DirectionalMovement(id__,0,
																	          const_MovementStm_movementTime))
														)\{|get_CLID_DirectionalMovement|}
													)
													[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
													dbisim(Clock_CLID_WaitForUserInput(id__,0,
															          const_MovementStm_movementTime))
												)\{|get_CLID_WaitForUserInput|}
											)
											[| {|get_CLID_s0,s0::entered,terminate|} |]
											dbisim(Clock_CLID_s0(id__,0,
													          const_MovementStm_movementTime))
										)\{|get_CLID_s0|}
									)
									[| {|get_CLID_Move,Move::entered,terminate|} |]
									dbisim(Clock_CLID_Move(id__,0,
											          const_MovementStm_movementTime))
								)\{|get_CLID_Move|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_MovementStm_movementTime) = 
						((let
							getsetLocalChannels = {|get_aflyToWayPoint,set_aflyToWayPoint,
							get_aflyToAreaWayPoints,set_aflyToAreaWayPoints,
							get_adirectionalMovement,set_adirectionalMovement,
							get_asearchType,set_asearchType,
							get_searchComplete,set_searchComplete|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_MovementStm_movementTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_MovementStm_movementTime) [| {terminate} |] Clocks(id__,
							 		          const_MovementStm_movementTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_MovementStm_movementTime) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																IteratedBehaviour(id__,
																		    const_MovementStm_movementTime)
																[| {|get_searchComplete,set_searchComplete,terminate|} |]
																Memory_searchComplete(true)
															)\{|get_searchComplete,set_searchComplete|}
														)
														[| {|get_asearchType,set_asearchType,terminate|} |]
														Memory_asearchType(SearchType_AreaSearch)
													)\{|get_asearchType,set_asearchType|}
												)
												[| {|get_adirectionalMovement,set_adirectionalMovement,terminate|} |]
												Memory_adirectionalMovement(Direction_Up)
											)\{|get_adirectionalMovement,set_adirectionalMovement|}
										)
										[| {|get_aflyToAreaWayPoints,set_aflyToAreaWayPoints,terminate|} |]
										Memory_aflyToAreaWayPoints(((0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)))
									)\{|get_aflyToAreaWayPoints,set_aflyToAreaWayPoints|}
								)
								[| {|get_aflyToWayPoint,set_aflyToWayPoint,terminate|} |]
								Memory_aflyToWayPoint((0,0,0,0))
							)\{|get_aflyToWayPoint,set_aflyToWayPoint|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_MovementStm_movementTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								s0::enter,
								WaitForUserInput::enter,
								InitiateSearch::enter,
								Move::enter,
								DirectionalMovement::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_s0,internal__.NID_Move,FlyToCoordinate__.NID_WaitForUserInput.in,internal__.NID_i0,FollowPlan__.NID_WaitForUserInput.in,MoveDrone__.NID_WaitForUserInput.in,internal__.NID_DirectionalMovement,DroneStopSearch__.NID_InitiateSearch.in,internal__.NID_WaitForUserInput,internal__.NID_InitiateSearch|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   s0::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   WaitForUserInput::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   InitiateSearch::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   Move::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   [| { share__, terminate } |] (
									   DirectionalMovement::VS_O__(id__,
									   		    const_MovementStm_movementTime)
									   )
									   )
									   )
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,FlyToCoordinate__.NID_WaitForUserInput.in,FollowPlan__.NID_WaitForUserInput.in,MoveDrone__.NID_WaitForUserInput.in,internal__.NID_WaitForUserInput|}]]
									 [[InitiateSearch::interrupt <- x__ | x__ <- {|interrupt,DroneStopSearch__.NID_InitiateSearch.in,internal__.NID_InitiateSearch|}]]
									 [[Move::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Move|}]]
									 [[DirectionalMovement::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DirectionalMovement|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_asearchType,setR_aflyToWayPoint,setR_adirectionalMovement |} ]] 
									  [[set_droneOn <- setL_droneOn]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_droneOn
									 			,setR_asearchType
									 			 			,setR_aflyToWayPoint
									 			 			,setR_adirectionalMovement
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_MovementStm_movementTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
									  [[set_asearchType <- setR_asearchType,set_aflyToWayPoint <- setR_aflyToWayPoint,set_adirectionalMovement <- setR_adirectionalMovement]]
									 )
									)[[setL_droneOn <- set_droneOn]]
									 [[setR_asearchType <- set_asearchType,setR_aflyToWayPoint <- set_aflyToWayPoint,setR_adirectionalMovement <- set_adirectionalMovement]]
									)
								)
								 \ hideSet)
								[[
									FollowPlan__.x____ <- FollowPlan,
									MoveDrone__.x____ <- MoveDrone,
									FlyToCoordinate__.x____ <- FlyToCoordinate,
									FlyToAreaCoordinates__.x____ <- FlyToAreaCoordinates,
									DroneStopSearch__.x____ <- DroneStopSearch
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_MovementStm_movementTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_MovementStm_movementTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Move,Move::entered,get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_DirectionalMovement,DirectionalMovement::entered,get_CLID_InitiateSearch,InitiateSearch::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_MovementStm_movementTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_MovementStm_movementTime)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_MovementStm_movementTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Move,Move::entered,get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_DirectionalMovement,DirectionalMovement::entered,get_CLID_InitiateSearch,InitiateSearch::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	MachineBody_VS_O(id__,
																			    const_MovementStm_movementTime)
																	[| {|get_CLID_InitiateSearch,InitiateSearch::entered,terminate|} |]
																	dbisim(Clock_CLID_InitiateSearch(id__,0,
																			          const_MovementStm_movementTime))
																)\{|get_CLID_InitiateSearch|}
															)
															[| {|get_CLID_DirectionalMovement,DirectionalMovement::entered,terminate|} |]
															dbisim(Clock_CLID_DirectionalMovement(id__,0,
																	          const_MovementStm_movementTime))
														)\{|get_CLID_DirectionalMovement|}
													)
													[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
													dbisim(Clock_CLID_WaitForUserInput(id__,0,
															          const_MovementStm_movementTime))
												)\{|get_CLID_WaitForUserInput|}
											)
											[| {|get_CLID_s0,s0::entered,terminate|} |]
											dbisim(Clock_CLID_s0(id__,0,
													          const_MovementStm_movementTime))
										)\{|get_CLID_s0|}
									)
									[| {|get_CLID_Move,Move::entered,terminate|} |]
									dbisim(Clock_CLID_Move(id__,0,
											          const_MovementStm_movementTime))
								)\{|get_CLID_Move|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_MovementStm_movementTime) = 
						dbisim((let
							getsetLocalChannels = {|get_aflyToWayPoint,set_aflyToWayPoint,
							get_aflyToAreaWayPoints,set_aflyToAreaWayPoints,
							get_adirectionalMovement,set_adirectionalMovement,
							get_asearchType,set_asearchType,
							get_searchComplete,set_searchComplete|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_MovementStm_movementTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_MovementStm_movementTime) [| {terminate} |] Clocks(id__,
							 		          const_MovementStm_movementTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_MovementStm_movementTime) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																IteratedBehaviour_VS_O(id__,
																		    const_MovementStm_movementTime)
																[| {|get_searchComplete,set_searchComplete,terminate|} |]
																Memory_searchComplete(true)
															)\{|get_searchComplete,set_searchComplete|}
														)
														[| {|get_asearchType,set_asearchType,terminate|} |]
														Memory_asearchType(SearchType_AreaSearch)
													)\{|get_asearchType,set_asearchType|}
												)
												[| {|get_adirectionalMovement,set_adirectionalMovement,terminate|} |]
												Memory_adirectionalMovement(Direction_Up)
											)\{|get_adirectionalMovement,set_adirectionalMovement|}
										)
										[| {|get_aflyToAreaWayPoints,set_aflyToAreaWayPoints,terminate|} |]
										Memory_aflyToAreaWayPoints(((0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)))
									)\{|get_aflyToAreaWayPoints,set_aflyToAreaWayPoints|}
								)
								[| {|get_aflyToWayPoint,set_aflyToWayPoint,terminate|} |]
								Memory_aflyToWayPoint((0,0,0,0))
							)\{|get_aflyToWayPoint,set_aflyToWayPoint|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_aflyToWayPoint(aflyToWayPoint) =
						get_aflyToWayPoint!aflyToWayPoint -> Memory_aflyToWayPoint(aflyToWayPoint)
						[]
						set_aflyToWayPoint?x__ -> Memory_aflyToWayPoint(x__)
						[]
						terminate -> SKIP
					Memory_aflyToAreaWayPoints(aflyToAreaWayPoints) =
						get_aflyToAreaWayPoints!aflyToAreaWayPoints -> Memory_aflyToAreaWayPoints(aflyToAreaWayPoints)
						[]
						set_aflyToAreaWayPoints?x__ -> Memory_aflyToAreaWayPoints(x__)
						[]
						terminate -> SKIP
					Memory_adirectionalMovement(adirectionalMovement) =
						get_adirectionalMovement!adirectionalMovement -> Memory_adirectionalMovement(adirectionalMovement)
						[]
						set_adirectionalMovement?x__ -> Memory_adirectionalMovement(x__)
						[]
						terminate -> SKIP
					Memory_asearchType(asearchType) =
						get_asearchType!asearchType -> Memory_asearchType(asearchType)
						[]
						set_asearchType?x__ -> Memory_asearchType(x__)
						[]
						terminate -> SKIP
					Memory_searchComplete(searchComplete) =
						get_searchComplete!searchComplete -> Memory_searchComplete(searchComplete)
						[]
						set_searchComplete?x__ -> Memory_searchComplete(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_MovementStm_movementTime) = Memory_aflyToWayPoint((0,0,0,0))
					[| { terminate } |] (
					Memory_aflyToAreaWayPoints(((0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)))
					[| { terminate } |] (
					Memory_adirectionalMovement(Direction_Up)
					[| { terminate } |] (
					Memory_asearchType(SearchType_AreaSearch)
					[| { terminate } |] (
					Memory_searchComplete(true)
					)
					)
					)
					)
					
					getsetLocalChannels = {|get_aflyToWayPoint,set_aflyToWayPoint,get_aflyToAreaWayPoints,set_aflyToAreaWayPoints,get_adirectionalMovement,set_adirectionalMovement,get_asearchType,set_asearchType,get_searchComplete,set_searchComplete|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_MovementStm_movementTime) = STM_VS_O(id__,
							    const_MovementStm_movementTime) \ localClockResets
					D__(id__,
							    const_MovementStm_movementTime) = timed_priority(STM(id__,
							    const_MovementStm_movementTime) \ union(internal_events,localClockResets))
					O__(id__,
							    const_MovementStm_movementTime) = dbisim(D__(id__,
							    const_MovementStm_movementTime))
					VS__(id__,
							    const_MovementStm_movementTime) = FVS__(id__,
							    const_MovementStm_movementTime)
					VS_O__(id__,
							    const_MovementStm_movementTime) = dbisim(FVS__(id__,
							    const_MovementStm_movementTime))
					HEXT__(id__,
							    const_MovementStm_movementTime) = O__(id__,
							    const_MovementStm_movementTime) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_MovementStm_movementTime) = dbisim(timed_priority(STM(id__,
							    const_MovementStm_movementTime) \ internal_events))
					HUP__(id__,
							    const_MovementStm_movementTime) = timed_priority(O__(id__,
							    const_MovementStm_movementTime) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_MovementStm_movementTime) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_Move(id__,x__,
							          const_MovementStm_movementTime) = 
						TimeOut_1(
							Move::entered -> Clock_CLID_Move(id__,0,
									          const_MovementStm_movementTime)
							[]
							get_CLID_Move!x__ -> Clock_CLID_Move(id__,x__,
									          const_MovementStm_movementTime)
							[]
							terminate -> SKIP,Clock_CLID_Move(id__,clock_type_plus(x__,1,CLID_Move_clock_type(id__,
									          const_MovementStm_movementTime)),
									          const_MovementStm_movementTime))
					Clock_CLID_s0(id__,x__,
							          const_MovementStm_movementTime) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(id__,0,
									          const_MovementStm_movementTime)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
									          const_MovementStm_movementTime)
							[]
							terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
									          const_MovementStm_movementTime)),
									          const_MovementStm_movementTime))
					Clock_CLID_WaitForUserInput(id__,x__,
							          const_MovementStm_movementTime) = 
						TimeOut_1(
							WaitForUserInput::entered -> Clock_CLID_WaitForUserInput(id__,0,
									          const_MovementStm_movementTime)
							[]
							get_CLID_WaitForUserInput!x__ -> Clock_CLID_WaitForUserInput(id__,x__,
									          const_MovementStm_movementTime)
							[]
							terminate -> SKIP,Clock_CLID_WaitForUserInput(id__,clock_type_plus(x__,1,CLID_WaitForUserInput_clock_type(id__,
									          const_MovementStm_movementTime)),
									          const_MovementStm_movementTime))
					Clock_CLID_DirectionalMovement(id__,x__,
							          const_MovementStm_movementTime) = 
						TimeOut_1(
							DirectionalMovement::entered -> Clock_CLID_DirectionalMovement(id__,0,
									          const_MovementStm_movementTime)
							[]
							get_CLID_DirectionalMovement!x__ -> Clock_CLID_DirectionalMovement(id__,x__,
									          const_MovementStm_movementTime)
							[]
							terminate -> SKIP,Clock_CLID_DirectionalMovement(id__,clock_type_plus(x__,1,CLID_DirectionalMovement_clock_type(id__,
									          const_MovementStm_movementTime)),
									          const_MovementStm_movementTime))
					Clock_CLID_InitiateSearch(id__,x__,
							          const_MovementStm_movementTime) = 
						TimeOut_1(
							InitiateSearch::entered -> Clock_CLID_InitiateSearch(id__,0,
									          const_MovementStm_movementTime)
							[]
							get_CLID_InitiateSearch!x__ -> Clock_CLID_InitiateSearch(id__,x__,
									          const_MovementStm_movementTime)
							[]
							terminate -> SKIP,Clock_CLID_InitiateSearch(id__,clock_type_plus(x__,1,CLID_InitiateSearch_clock_type(id__,
									          const_MovementStm_movementTime)),
									          const_MovementStm_movementTime))
					
					StateClocks(id__,
							          const_MovementStm_movementTime) = dbisim(Clock_CLID_Move(id__,0,
							          const_MovementStm_movementTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_s0(id__,0,
							          const_MovementStm_movementTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_WaitForUserInput(id__,0,
							          const_MovementStm_movementTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_DirectionalMovement(id__,0,
							          const_MovementStm_movementTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_InitiateSearch(id__,0,
							          const_MovementStm_movementTime))
					)
					)
					)
					)
					
					stateClockSync = {|get_CLID_Move,Move::entered,get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered,get_CLID_DirectionalMovement,DirectionalMovement::entered,get_CLID_InitiateSearch,InitiateSearch::entered|}
					
					-- Shared memory
					-- Shared memory variables
					Memory_droneOn(droneOn) =
						get_droneOn!droneOn -> Memory_droneOn(droneOn)
						[]
						set_droneOn?x__ -> Memory_droneOn(x__)
						[]
						set_EXT_droneOn?x__ -> Memory_droneOn(x__)
						[]
						terminate -> SKIP
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_MovementStm_movementTime) = Memory_droneOn(true)
					
					sharedVarSync = {|get_droneOn,set_droneOn,set_EXT_droneOn|}
					
					sharedVarHide = {|get_droneOn|}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__initSearch(id__,
							    param_searchType) 	= initSearchCall.param_searchType -> SKIP
					CALL__directionMovement(id__,
							    param_direction) 	= directionMovementCall.param_direction -> SKIP
					CALL__movement(id__,
							    param_coord) 	= movementCall.param_coord -> SKIP
					
					-- declaring controller memory
					Memory(id__, droneOn) = (
					set_EXT_droneOn?x__ -> stm_ref0::set_EXT_droneOn!x__ -> 
					Memory(id__,x__)
					)
					
					D__(id__,
							    const_MovementController_stm_ref0_movementTime) = prioritise(	((
							let
								const_MovementStm_movementTime = const_MovementController_stm_ref0_movementTime
							within 
							stm_ref0::D__(id__,
									    const_MovementStm_movementTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::FlyToCoordinate <- FlyToCoordinate,
								stm_ref0::MoveDrone <- MoveDrone,
								stm_ref0::FollowPlan <- FollowPlan,
								stm_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
								stm_ref0::DroneStopSearch <- DroneStopSearch,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::initSearchCall <- initSearchCall,
								stm_ref0::directionMovementCall <- directionMovementCall,
								stm_ref0::movementCall <- movementCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_MovementController_stm_ref0_movementTime) = prioritise(	((
							let
								const_MovementStm_movementTime = const_MovementController_stm_ref0_movementTime
							within 
							stm_ref0::VS__(id__,
									    const_MovementStm_movementTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::FlyToCoordinate <- FlyToCoordinate,
								stm_ref0::MoveDrone <- MoveDrone,
								stm_ref0::FollowPlan <- FollowPlan,
								stm_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
								stm_ref0::DroneStopSearch <- DroneStopSearch,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::initSearchCall <- initSearchCall,
								stm_ref0::directionMovementCall <- directionMovementCall,
								stm_ref0::movementCall <- movementCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_MovementController_stm_ref0_movementTime) = dbisim(prioritise(	((
							let
								const_MovementStm_movementTime = const_MovementController_stm_ref0_movementTime
							within 
							stm_ref0::O__(id__,
									    const_MovementStm_movementTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::FlyToCoordinate <- FlyToCoordinate,
								stm_ref0::MoveDrone <- MoveDrone,
								stm_ref0::FollowPlan <- FollowPlan,
								stm_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
								stm_ref0::DroneStopSearch <- DroneStopSearch,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::initSearchCall <- initSearchCall,
								stm_ref0::directionMovementCall <- directionMovementCall,
								stm_ref0::movementCall <- movementCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_MovementController_stm_ref0_movementTime) = dbisim(prioritise(	((
							let
								const_MovementStm_movementTime = const_MovementController_stm_ref0_movementTime
							within 
							stm_ref0::VS_O__(id__,
									    const_MovementStm_movementTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::FlyToCoordinate <- FlyToCoordinate,
								stm_ref0::MoveDrone <- MoveDrone,
								stm_ref0::FollowPlan <- FollowPlan,
								stm_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
								stm_ref0::DroneStopSearch <- DroneStopSearch,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::initSearchCall <- initSearchCall,
								stm_ref0::directionMovementCall <- directionMovementCall,
								stm_ref0::movementCall <- movementCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_MovementController_stm_ref0_movementTime) = O__(id__,
							    const_MovementController_stm_ref0_movementTime) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref3
			shared_variable_events = {|
				set_EXT_droneOn
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel GetBatteryStatus: InOut
			
			channel set_droneOn: core_boolean
			channel get_droneOn: core_boolean
			
			channel set_EXT_droneOn: core_boolean
			
			-- declaring call and ret events for undefined operations
			channel DisplayStatusCall: Status
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	GetBatteryStatus
			,	set_EXT_droneOn, set_droneOn
			,	DisplayStatusCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_droneOn,set_droneOn|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_WaitForUserInput|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_droneOn, set_droneOn, setL_droneOn, setR_droneOn: core_boolean
				
				-- Shared variable channels
				channel set_EXT_droneOn: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel GetBatteryStatus__: NIDS.InOut
				channel GetBatteryStatus: InOut
				
				-- Declaring call and ret events for undefined operations
				channel DisplayStatusCall: Status
				
				enterSS = {|
				i0::enter,
				f0::enter,
				WaitForUserInput::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				WaitForUserInput::entered,
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_droneOn
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_droneOn, set_droneOn
				,	GetBatteryStatus
				,	DisplayStatusCall
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				channel get_CLID_s0 : core_clock_type 
				channel get_CLID_WaitForUserInput : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__,
						          const_HandheldStm_hToDCommTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_s0_clock_type(id__,
						          const_HandheldStm_hToDCommTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_WaitForUserInput_clock_type(id__,
						          const_HandheldStm_hToDCommTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_HandheldStm_hToDCommTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_HandheldStm_hToDCommTime) = D__(id__,
									    const_HandheldStm_hToDCommTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_HandheldStm_hToDCommTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_HandheldStm_hToDCommTime) = D__(id__,
									    const_HandheldStm_hToDCommTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: WaitForUserInput
					module WaitForUserInput
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_HandheldStm_hToDCommTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_HandheldStm_hToDCommTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_HandheldStm_hToDCommTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_HandheldStm_hToDCommTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_HandheldStm_hToDCommTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_HandheldStm_hToDCommTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__DisplayStatus(id__,
							    const_HandheldStm_hToDCommTime,
								param_status) = EDeadline(DisplayStatusCall.param_status,0)
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_HandheldStm_hToDCommTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_HandheldStm_hToDCommTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_HandheldStm_hToDCommTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_HandheldStm_hToDCommTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_HandheldStm_hToDCommTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_HandheldStm_hToDCommTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_HandheldStm_hToDCommTime) = ((let
						Trans = share__choice(get_droneOn?droneOn -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((droneOn)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim(((not (droneOn)))&(internal__!NID_WaitForUserInput -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 [] dbisim((droneOn)&(GetBatteryStatus__!NID_WaitForUserInput.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_HandheldStm_hToDCommTime);true&CALL__DisplayStatus(
							 			id__,
							 		    const_HandheldStm_hToDCommTime,
							 			Status_High
							 		) ; WaitForUserInput::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								WaitForUserInput::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_s0,internal__.NID_WaitForUserInput,GetBatteryStatus__.NID_WaitForUserInput.in,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   WaitForUserInput::D__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   s0::D__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_WaitForUserInput,GetBatteryStatus__.NID_WaitForUserInput.in|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_droneOn <- setL_droneOn]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_droneOn
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_HandheldStm_hToDCommTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
									 )
									)[[setL_droneOn <- set_droneOn]]
									)
								)
								 \ hideSet)
								[[
									GetBatteryStatus__.x____ <- GetBatteryStatus
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_HandheldStm_hToDCommTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered|}
						 within
							(MachineBody(id__,
									    const_HandheldStm_hToDCommTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_HandheldStm_hToDCommTime)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__,
													    const_HandheldStm_hToDCommTime)
											[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
											dbisim(Clock_CLID_WaitForUserInput(id__,0,
													          const_HandheldStm_hToDCommTime))
										)\{|get_CLID_WaitForUserInput|}
									)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_HandheldStm_hToDCommTime))
								)\{|get_CLID_s0|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_HandheldStm_hToDCommTime) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_HandheldStm_hToDCommTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_HandheldStm_hToDCommTime) [| {terminate} |] Clocks(id__,
							 		          const_HandheldStm_hToDCommTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_HandheldStm_hToDCommTime) =
						(IteratedBehaviour(id__,
								    const_HandheldStm_hToDCommTime))
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								WaitForUserInput::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_s0,internal__.NID_WaitForUserInput,GetBatteryStatus__.NID_WaitForUserInput.in,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   WaitForUserInput::VS_O__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   [| { share__, terminate } |] (
									   s0::VS_O__(id__,
									   		    const_HandheldStm_hToDCommTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[WaitForUserInput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_WaitForUserInput,GetBatteryStatus__.NID_WaitForUserInput.in|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_droneOn <- setL_droneOn]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_droneOn
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_HandheldStm_hToDCommTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_droneOn |} ]]
									 )
									)[[setL_droneOn <- set_droneOn]]
									)
								)
								 \ hideSet)
								[[
									GetBatteryStatus__.x____ <- GetBatteryStatus
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_HandheldStm_hToDCommTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_HandheldStm_hToDCommTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_HandheldStm_hToDCommTime)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__,
													    const_HandheldStm_hToDCommTime)
											[| {|get_CLID_WaitForUserInput,WaitForUserInput::entered,terminate|} |]
											dbisim(Clock_CLID_WaitForUserInput(id__,0,
													          const_HandheldStm_hToDCommTime))
										)\{|get_CLID_WaitForUserInput|}
									)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_HandheldStm_hToDCommTime))
								)\{|get_CLID_s0|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_HandheldStm_hToDCommTime) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_HandheldStm_hToDCommTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_HandheldStm_hToDCommTime) [| {terminate} |] Clocks(id__,
							 		          const_HandheldStm_hToDCommTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_HandheldStm_hToDCommTime) =
						(IteratedBehaviour_VS_O(id__,
								    const_HandheldStm_hToDCommTime))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
							    const_HandheldStm_hToDCommTime) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_HandheldStm_hToDCommTime) = STM_VS_O(id__,
							    const_HandheldStm_hToDCommTime) \ localClockResets
					D__(id__,
							    const_HandheldStm_hToDCommTime) = timed_priority(STM(id__,
							    const_HandheldStm_hToDCommTime) \ union(internal_events,localClockResets))
					O__(id__,
							    const_HandheldStm_hToDCommTime) = dbisim(D__(id__,
							    const_HandheldStm_hToDCommTime))
					VS__(id__,
							    const_HandheldStm_hToDCommTime) = FVS__(id__,
							    const_HandheldStm_hToDCommTime)
					VS_O__(id__,
							    const_HandheldStm_hToDCommTime) = dbisim(FVS__(id__,
							    const_HandheldStm_hToDCommTime))
					HEXT__(id__,
							    const_HandheldStm_hToDCommTime) = O__(id__,
							    const_HandheldStm_hToDCommTime) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_HandheldStm_hToDCommTime) = dbisim(timed_priority(STM(id__,
							    const_HandheldStm_hToDCommTime) \ internal_events))
					HUP__(id__,
							    const_HandheldStm_hToDCommTime) = timed_priority(O__(id__,
							    const_HandheldStm_hToDCommTime) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_HandheldStm_hToDCommTime) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(id__,x__,
							          const_HandheldStm_hToDCommTime) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(id__,0,
									          const_HandheldStm_hToDCommTime)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
									          const_HandheldStm_hToDCommTime)
							[]
							terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
									          const_HandheldStm_hToDCommTime)),
									          const_HandheldStm_hToDCommTime))
					Clock_CLID_WaitForUserInput(id__,x__,
							          const_HandheldStm_hToDCommTime) = 
						TimeOut_1(
							WaitForUserInput::entered -> Clock_CLID_WaitForUserInput(id__,0,
									          const_HandheldStm_hToDCommTime)
							[]
							get_CLID_WaitForUserInput!x__ -> Clock_CLID_WaitForUserInput(id__,x__,
									          const_HandheldStm_hToDCommTime)
							[]
							terminate -> SKIP,Clock_CLID_WaitForUserInput(id__,clock_type_plus(x__,1,CLID_WaitForUserInput_clock_type(id__,
									          const_HandheldStm_hToDCommTime)),
									          const_HandheldStm_hToDCommTime))
					
					StateClocks(id__,
							          const_HandheldStm_hToDCommTime) = dbisim(Clock_CLID_s0(id__,0,
							          const_HandheldStm_hToDCommTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_WaitForUserInput(id__,0,
							          const_HandheldStm_hToDCommTime))
					)
					
					stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_WaitForUserInput,WaitForUserInput::entered|}
					
					-- Shared memory
					-- Shared memory variables
					Memory_droneOn(droneOn) =
						get_droneOn!droneOn -> Memory_droneOn(droneOn)
						[]
						set_droneOn?x__ -> Memory_droneOn(x__)
						[]
						set_EXT_droneOn?x__ -> Memory_droneOn(x__)
						[]
						terminate -> SKIP
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_HandheldStm_hToDCommTime) = Memory_droneOn(true)
					
					sharedVarSync = {|get_droneOn,set_droneOn,set_EXT_droneOn|}
					
					sharedVarHide = {|get_droneOn|}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__DisplayStatus(id__,
							    param_status) 	= DisplayStatusCall.param_status -> SKIP
					
					-- declaring controller memory
					Memory(id__, droneOn) = (
					set_EXT_droneOn?x__ -> stm_ref0::set_EXT_droneOn!x__ -> 
					Memory(id__,x__)
					)
					
					D__(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) = prioritise(	((
							let
								const_HandheldStm_hToDCommTime = const_HandheldController_stm_ref0_hToDCommTime
							within 
							stm_ref0::D__(id__,
									    const_HandheldStm_hToDCommTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetBatteryStatus <- GetBatteryStatus,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::DisplayStatusCall <- DisplayStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) = prioritise(	((
							let
								const_HandheldStm_hToDCommTime = const_HandheldController_stm_ref0_hToDCommTime
							within 
							stm_ref0::VS__(id__,
									    const_HandheldStm_hToDCommTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetBatteryStatus <- GetBatteryStatus,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::DisplayStatusCall <- DisplayStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) = dbisim(prioritise(	((
							let
								const_HandheldStm_hToDCommTime = const_HandheldController_stm_ref0_hToDCommTime
							within 
							stm_ref0::O__(id__,
									    const_HandheldStm_hToDCommTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetBatteryStatus <- GetBatteryStatus,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::DisplayStatusCall <- DisplayStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) = dbisim(prioritise(	((
							let
								const_HandheldStm_hToDCommTime = const_HandheldController_stm_ref0_hToDCommTime
							within 
							stm_ref0::VS_O__(id__,
									    const_HandheldStm_hToDCommTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetBatteryStatus <- GetBatteryStatus,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn,
								stm_ref0::DisplayStatusCall <- DisplayStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) = O__(id__,
							    const_HandheldController_stm_ref0_hToDCommTime) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref4
			shared_variable_events = {|
				set_EXT_droneOn
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel OnOffDrone: InOut
			
			channel set_droneOn: core_boolean
			channel get_droneOn: core_boolean
			
			channel set_EXT_droneOn: core_boolean
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	OnOffDrone
			,	set_EXT_droneOn, set_droneOn
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_droneOn,set_droneOn|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_Off|
				              NID_DroneOperating
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_forceQuit, set_forceQuit, setL_forceQuit, setR_forceQuit: core_boolean
				channel get_droneOn, set_droneOn, setL_droneOn, setR_droneOn: core_boolean
				
				-- Shared variable channels
				channel set_EXT_droneOn: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel OnOffDrone__: NIDS.InOut
				channel OnOffDrone: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				Off::enter,
				DroneOperating::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				Off::entered,
				DroneOperating::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_droneOn
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_droneOn, set_droneOn
				,	OnOffDrone
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_Off : core_clock_type 
				channel get_CLID_DroneOperating : core_clock_type 
				channel get_CLID_f0 : core_clock_type 
				--channel increment__
				
				CLID_Off_clock_type(id__,
						          const_PowerStm_startTime,
						          const_PowerStm_dronePowerTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_DroneOperating_clock_type(id__,
						          const_PowerStm_startTime,
						          const_PowerStm_dronePowerTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_f0_clock_type(id__,
						          const_PowerStm_startTime,
						          const_PowerStm_dronePowerTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Off
					module Off
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SHARE_WAIT(const_PowerStm_startTime);share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SHARE_WAIT(const_PowerStm_startTime);share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DroneOperating
					module DroneOperating
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_droneOn!false -> SKIP))) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_PowerStm_startTime,
										    const_PowerStm_dronePowerTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_PowerStm_startTime,
								    const_PowerStm_dronePowerTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_PowerStm_startTime,
										    const_PowerStm_dronePowerTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_droneOn|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_PowerStm_startTime,
								    const_PowerStm_dronePowerTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(OnOffDrone__!NID_Off.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_PowerStm_dronePowerTime);share__choice(true & (share__choice(set_droneOn!true -> SKIP))) ; DroneOperating::enter -> SKIP)))
							 [] dbisim((true)&(OnOffDrone__!NID_DroneOperating.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Off::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								Off::enter,
								DroneOperating::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|OnOffDrone__.NID_Off.in,OnOffDrone__.NID_DroneOperating.in,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   Off::D__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   DroneOperating::D__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[Off::interrupt <- x__ | x__ <- {|interrupt,OnOffDrone__.NID_Off.in|}]]
									 [[DroneOperating::interrupt <- x__ | x__ <- {|interrupt,OnOffDrone__.NID_DroneOperating.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_PowerStm_startTime,
									 		    const_PowerStm_dronePowerTime))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									OnOffDrone__.x____ <- OnOffDrone
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_PowerStm_startTime,
							 		          const_PowerStm_dronePowerTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Off,Off::entered,get_CLID_DroneOperating,DroneOperating::entered|}
						 within
							(MachineBody(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Off,Off::entered,get_CLID_DroneOperating,DroneOperating::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__,
													    const_PowerStm_startTime,
													    const_PowerStm_dronePowerTime)
											[| {|get_CLID_DroneOperating,DroneOperating::entered,terminate|} |]
											dbisim(Clock_CLID_DroneOperating(id__,0,
													          const_PowerStm_startTime,
													          const_PowerStm_dronePowerTime))
										)\{|get_CLID_DroneOperating|}
									)
									[| {|get_CLID_Off,Off::entered,terminate|} |]
									dbisim(Clock_CLID_Off(id__,0,
											          const_PowerStm_startTime,
											          const_PowerStm_dronePowerTime))
								)\{|get_CLID_Off|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						((let
							getsetLocalChannels = {|get_forceQuit,set_forceQuit|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_PowerStm_startTime,
							 		    const_PowerStm_dronePowerTime) [| {terminate} |] Clocks(id__,
							 		          const_PowerStm_startTime,
							 		          const_PowerStm_dronePowerTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__,
										    const_PowerStm_startTime,
										    const_PowerStm_dronePowerTime)
								[| {|get_forceQuit,set_forceQuit,terminate|} |]
								Memory_forceQuit(false)
							)\{|get_forceQuit,set_forceQuit|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								Off::enter,
								DroneOperating::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|OnOffDrone__.NID_Off.in,OnOffDrone__.NID_DroneOperating.in,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   Off::VS_O__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   [| { share__, terminate } |] (
									   DroneOperating::VS_O__(id__,
									   		    const_PowerStm_startTime,
									   		    const_PowerStm_dronePowerTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[Off::interrupt <- x__ | x__ <- {|interrupt,OnOffDrone__.NID_Off.in|}]]
									 [[DroneOperating::interrupt <- x__ | x__ <- {|interrupt,OnOffDrone__.NID_DroneOperating.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_PowerStm_startTime,
									 		    const_PowerStm_dronePowerTime))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									OnOffDrone__.x____ <- OnOffDrone
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_PowerStm_startTime,
							 		          const_PowerStm_dronePowerTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Off,Off::entered,get_CLID_DroneOperating,DroneOperating::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_Off,Off::entered,get_CLID_DroneOperating,DroneOperating::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__,
													    const_PowerStm_startTime,
													    const_PowerStm_dronePowerTime)
											[| {|get_CLID_DroneOperating,DroneOperating::entered,terminate|} |]
											dbisim(Clock_CLID_DroneOperating(id__,0,
													          const_PowerStm_startTime,
													          const_PowerStm_dronePowerTime))
										)\{|get_CLID_DroneOperating|}
									)
									[| {|get_CLID_Off,Off::entered,terminate|} |]
									dbisim(Clock_CLID_Off(id__,0,
											          const_PowerStm_startTime,
											          const_PowerStm_dronePowerTime))
								)\{|get_CLID_Off|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = 
						dbisim((let
							getsetLocalChannels = {|get_forceQuit,set_forceQuit|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_PowerStm_startTime,
							 		    const_PowerStm_dronePowerTime) [| {terminate} |] Clocks(id__,
							 		          const_PowerStm_startTime,
							 		          const_PowerStm_dronePowerTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__,
										    const_PowerStm_startTime,
										    const_PowerStm_dronePowerTime)
								[| {|get_forceQuit,set_forceQuit,terminate|} |]
								Memory_forceQuit(false)
							)\{|get_forceQuit,set_forceQuit|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_forceQuit(forceQuit) =
						get_forceQuit!forceQuit -> Memory_forceQuit(forceQuit)
						[]
						set_forceQuit?x__ -> Memory_forceQuit(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = Memory_forceQuit(false)
					
					getsetLocalChannels = {|get_forceQuit,set_forceQuit|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = STM_VS_O(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) \ localClockResets
					D__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = timed_priority(STM(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) \ union(internal_events,localClockResets))
					O__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = dbisim(D__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime))
					VS__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = FVS__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime)
					VS_O__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = dbisim(FVS__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime))
					HEXT__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = O__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = dbisim(timed_priority(STM(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) \ internal_events))
					HUP__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = timed_priority(O__(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_Off(id__,x__,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime) = 
						TimeOut_1(
							Off::entered -> Clock_CLID_Off(id__,0,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)
							[]
							get_CLID_Off!x__ -> Clock_CLID_Off(id__,x__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)
							[]
							terminate -> SKIP,Clock_CLID_Off(id__,clock_type_plus(x__,1,CLID_Off_clock_type(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)),
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime))
					Clock_CLID_DroneOperating(id__,x__,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime) = 
						TimeOut_1(
							DroneOperating::entered -> Clock_CLID_DroneOperating(id__,0,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)
							[]
							get_CLID_DroneOperating!x__ -> Clock_CLID_DroneOperating(id__,x__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)
							[]
							terminate -> SKIP,Clock_CLID_DroneOperating(id__,clock_type_plus(x__,1,CLID_DroneOperating_clock_type(id__,
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime)),
									          const_PowerStm_startTime,
									          const_PowerStm_dronePowerTime))
					
					StateClocks(id__,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime) = dbisim(Clock_CLID_Off(id__,0,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_DroneOperating(id__,0,
							          const_PowerStm_startTime,
							          const_PowerStm_dronePowerTime))
					)
					
					stateClockSync = {|get_CLID_Off,Off::entered,get_CLID_DroneOperating,DroneOperating::entered|}
					
					-- Shared memory
					-- Shared memory variables
					Memory_droneOn(droneOn) =
						get_droneOn!droneOn -> Memory_droneOn(droneOn)
						[]
						set_droneOn?x__ -> Memory_droneOn(x__)
						[]
						set_EXT_droneOn?x__ -> Memory_droneOn(x__)
						[]
						terminate -> SKIP
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_PowerStm_startTime,
							    const_PowerStm_dronePowerTime) = Memory_droneOn(true)
					
					sharedVarSync = {|get_droneOn,set_droneOn,set_EXT_droneOn|}
					
					sharedVarHide = {|get_droneOn|}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__, droneOn) = (
					set_EXT_droneOn?x__ -> stm_ref0::set_EXT_droneOn!x__ -> 
					Memory(id__,x__)
					)
					
					D__(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) = prioritise(	((
							let
								const_PowerStm_startTime = const_PowerController_stm_ref0_startTime
								const_PowerStm_dronePowerTime = const_PowerController_stm_ref0_dronePowerTime
							within 
							stm_ref0::D__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::OnOffDrone <- OnOffDrone,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) = prioritise(	((
							let
								const_PowerStm_startTime = const_PowerController_stm_ref0_startTime
								const_PowerStm_dronePowerTime = const_PowerController_stm_ref0_dronePowerTime
							within 
							stm_ref0::VS__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::OnOffDrone <- OnOffDrone,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) = dbisim(prioritise(	((
							let
								const_PowerStm_startTime = const_PowerController_stm_ref0_startTime
								const_PowerStm_dronePowerTime = const_PowerController_stm_ref0_dronePowerTime
							within 
							stm_ref0::O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::OnOffDrone <- OnOffDrone,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) = dbisim(prioritise(	((
							let
								const_PowerStm_startTime = const_PowerController_stm_ref0_startTime
								const_PowerStm_dronePowerTime = const_PowerController_stm_ref0_dronePowerTime
							within 
							stm_ref0::VS_O__(id__,
									    const_PowerStm_startTime,
									    const_PowerStm_dronePowerTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::OnOffDrone <- OnOffDrone,
								stm_ref0::set_droneOn <- set_droneOn,
								stm_ref0::get_droneOn <- get_droneOn
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_droneOn
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) = O__(id__,
							    const_PowerController_stm_ref0_startTime,
							    const_PowerController_stm_ref0_dronePowerTime) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {|get_droneOn,set_droneOn|}
		
		-- declaring module memory
		Memory(id__, droneOn) = (
						set_droneOn?x__ -> 
						ctrl_ref0::set_EXT_droneOn!x__ -> 
						ctrl_ref3::set_EXT_droneOn!x__ -> 
						ctrl_ref4::set_EXT_droneOn!x__ -> 
						Memory(id__,x__)
						)
		
		D__(id__,
				    const_MovementController_stm_ref0_movementTime,
				    const_HandheldController_stm_ref0_hToDCommTime,
				    const_PowerController_stm_ref0_startTime,
				    const_PowerController_stm_ref0_dronePowerTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::D__(id__,
										    const_MovementController_stm_ref0_movementTime)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::MoveDrone <- MoveDrone,
									ctrl_ref0::FollowPlan <- FollowPlan,
									ctrl_ref0::FlyToCoordinate <- FlyToCoordinate,
									ctrl_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
									ctrl_ref0::DroneStopSearch <- DroneStopSearch,
									ctrl_ref0::set_droneOn <- set_droneOn,
									ctrl_ref0::get_droneOn <- get_droneOn,
									ctrl_ref0::initSearchCall <- initSearchCall,
									ctrl_ref0::directionMovementCall <- directionMovementCall,
									ctrl_ref0::movementCall <- movementCall
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref3::D__(id__,
											    const_HandheldController_stm_ref0_hToDCommTime)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::GetBatteryStatus <- GetBatteryStatus,
										ctrl_ref3::set_droneOn <- set_droneOn,
										ctrl_ref3::get_droneOn <- get_droneOn,
										ctrl_ref3::DisplayStatusCall <- DisplayStatusCall
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref4::D__(id__,
											    const_PowerController_stm_ref0_startTime,
											    const_PowerController_stm_ref0_dronePowerTime)[[
										ctrl_ref4::terminate <- terminate,
										ctrl_ref4::OnOffDrone <- OnOffDrone,
										ctrl_ref4::set_droneOn <- set_droneOn,
										ctrl_ref4::get_droneOn <- get_droneOn
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_droneOn
									|},
									{|
										ctrl_ref0::set_EXT_droneOn,
										ctrl_ref3::set_EXT_droneOn,
										ctrl_ref4::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_droneOn,
						ctrl_ref3::set_EXT_droneOn,
						ctrl_ref4::set_EXT_droneOn
					|},
					{|
						get_droneOn, set_droneOn
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_MovementController_stm_ref0_movementTime,
				    const_HandheldController_stm_ref0_hToDCommTime,
				    const_PowerController_stm_ref0_startTime,
				    const_PowerController_stm_ref0_dronePowerTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS__(id__,
										    const_MovementController_stm_ref0_movementTime)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::MoveDrone <- MoveDrone,
									ctrl_ref0::FollowPlan <- FollowPlan,
									ctrl_ref0::FlyToCoordinate <- FlyToCoordinate,
									ctrl_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
									ctrl_ref0::DroneStopSearch <- DroneStopSearch,
									ctrl_ref0::set_droneOn <- set_droneOn,
									ctrl_ref0::get_droneOn <- get_droneOn,
									ctrl_ref0::initSearchCall <- initSearchCall,
									ctrl_ref0::directionMovementCall <- directionMovementCall,
									ctrl_ref0::movementCall <- movementCall
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref3::VS__(id__,
											    const_HandheldController_stm_ref0_hToDCommTime)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::GetBatteryStatus <- GetBatteryStatus,
										ctrl_ref3::set_droneOn <- set_droneOn,
										ctrl_ref3::get_droneOn <- get_droneOn,
										ctrl_ref3::DisplayStatusCall <- DisplayStatusCall
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref4::VS__(id__,
											    const_PowerController_stm_ref0_startTime,
											    const_PowerController_stm_ref0_dronePowerTime)[[
										ctrl_ref4::terminate <- terminate,
										ctrl_ref4::OnOffDrone <- OnOffDrone,
										ctrl_ref4::set_droneOn <- set_droneOn,
										ctrl_ref4::get_droneOn <- get_droneOn
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_droneOn
									|},
									{|
										ctrl_ref0::set_EXT_droneOn,
										ctrl_ref3::set_EXT_droneOn,
										ctrl_ref4::set_EXT_droneOn
									|}
								)
							|]
						Memory(id__, true)
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_droneOn,
						ctrl_ref3::set_EXT_droneOn,
						ctrl_ref4::set_EXT_droneOn
					|},
					{|
						get_droneOn, set_droneOn
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_MovementController_stm_ref0_movementTime,
				    const_HandheldController_stm_ref0_hToDCommTime,
				    const_PowerController_stm_ref0_startTime,
				    const_PowerController_stm_ref0_dronePowerTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__,
										    const_MovementController_stm_ref0_movementTime)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::MoveDrone <- MoveDrone,
									ctrl_ref0::FollowPlan <- FollowPlan,
									ctrl_ref0::FlyToCoordinate <- FlyToCoordinate,
									ctrl_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
									ctrl_ref0::DroneStopSearch <- DroneStopSearch,
									ctrl_ref0::set_droneOn <- set_droneOn,
									ctrl_ref0::get_droneOn <- get_droneOn,
									ctrl_ref0::initSearchCall <- initSearchCall,
									ctrl_ref0::directionMovementCall <- directionMovementCall,
									ctrl_ref0::movementCall <- movementCall
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref3::O__(id__,
											    const_HandheldController_stm_ref0_hToDCommTime)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::GetBatteryStatus <- GetBatteryStatus,
										ctrl_ref3::set_droneOn <- set_droneOn,
										ctrl_ref3::get_droneOn <- get_droneOn,
										ctrl_ref3::DisplayStatusCall <- DisplayStatusCall
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref4::O__(id__,
											    const_PowerController_stm_ref0_startTime,
											    const_PowerController_stm_ref0_dronePowerTime)[[
										ctrl_ref4::terminate <- terminate,
										ctrl_ref4::OnOffDrone <- OnOffDrone,
										ctrl_ref4::set_droneOn <- set_droneOn,
										ctrl_ref4::get_droneOn <- get_droneOn
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_droneOn
									|},
									{|
										ctrl_ref0::set_EXT_droneOn,
										ctrl_ref3::set_EXT_droneOn,
										ctrl_ref4::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_droneOn,
						ctrl_ref3::set_EXT_droneOn,
						ctrl_ref4::set_EXT_droneOn
					|},
					{|
						get_droneOn, set_droneOn
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_MovementController_stm_ref0_movementTime,
				    const_HandheldController_stm_ref0_hToDCommTime,
				    const_PowerController_stm_ref0_startTime,
				    const_PowerController_stm_ref0_dronePowerTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS_O__(id__,
										    const_MovementController_stm_ref0_movementTime)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::MoveDrone <- MoveDrone,
									ctrl_ref0::FollowPlan <- FollowPlan,
									ctrl_ref0::FlyToCoordinate <- FlyToCoordinate,
									ctrl_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
									ctrl_ref0::DroneStopSearch <- DroneStopSearch,
									ctrl_ref0::set_droneOn <- set_droneOn,
									ctrl_ref0::get_droneOn <- get_droneOn,
									ctrl_ref0::initSearchCall <- initSearchCall,
									ctrl_ref0::directionMovementCall <- directionMovementCall,
									ctrl_ref0::movementCall <- movementCall
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref3::VS_O__(id__,
											    const_HandheldController_stm_ref0_hToDCommTime)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::GetBatteryStatus <- GetBatteryStatus,
										ctrl_ref3::set_droneOn <- set_droneOn,
										ctrl_ref3::get_droneOn <- get_droneOn,
										ctrl_ref3::DisplayStatusCall <- DisplayStatusCall
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref4::VS_O__(id__,
											    const_PowerController_stm_ref0_startTime,
											    const_PowerController_stm_ref0_dronePowerTime)[[
										ctrl_ref4::terminate <- terminate,
										ctrl_ref4::OnOffDrone <- OnOffDrone,
										ctrl_ref4::set_droneOn <- set_droneOn,
										ctrl_ref4::get_droneOn <- get_droneOn
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_droneOn
									|},
									{|
										ctrl_ref0::set_EXT_droneOn,
										ctrl_ref3::set_EXT_droneOn,
										ctrl_ref4::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_droneOn,
						ctrl_ref3::set_EXT_droneOn,
						ctrl_ref4::set_EXT_droneOn
					|},
					{|
						get_droneOn, set_droneOn
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_MovementController_stm_ref0_movementTime,
				    const_HandheldController_stm_ref0_hToDCommTime,
				    const_PowerController_stm_ref0_startTime,
				    const_PowerController_stm_ref0_dronePowerTime) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__,
										    const_MovementController_stm_ref0_movementTime)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::MoveDrone <- MoveDrone,
									ctrl_ref0::FollowPlan <- FollowPlan,
									ctrl_ref0::FlyToCoordinate <- FlyToCoordinate,
									ctrl_ref0::FlyToAreaCoordinates <- FlyToAreaCoordinates,
									ctrl_ref0::DroneStopSearch <- DroneStopSearch,
									ctrl_ref0::set_droneOn <- set_droneOn,
									ctrl_ref0::get_droneOn <- get_droneOn,
									ctrl_ref0::initSearchCall <- initSearchCall,
									ctrl_ref0::directionMovementCall <- directionMovementCall,
									ctrl_ref0::movementCall <- movementCall
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref3::O__(id__,
											    const_HandheldController_stm_ref0_hToDCommTime)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::GetBatteryStatus <- GetBatteryStatus,
										ctrl_ref3::set_droneOn <- set_droneOn,
										ctrl_ref3::get_droneOn <- get_droneOn,
										ctrl_ref3::DisplayStatusCall <- DisplayStatusCall
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref4::O__(id__,
											    const_PowerController_stm_ref0_startTime,
											    const_PowerController_stm_ref0_dronePowerTime)[[
										ctrl_ref4::terminate <- terminate,
										ctrl_ref4::OnOffDrone <- OnOffDrone,
										ctrl_ref4::set_droneOn <- set_droneOn,
										ctrl_ref4::get_droneOn <- get_droneOn
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_droneOn
									|},
									{|
										ctrl_ref0::set_EXT_droneOn,
										ctrl_ref3::set_EXT_droneOn,
										ctrl_ref4::set_EXT_droneOn
									|}
								)
							|]
						dbisim(Memory(id__, true))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_droneOn,
						ctrl_ref3::set_EXT_droneOn,
						ctrl_ref4::set_EXT_droneOn
					|},
					{|
						get_droneOn
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule
