include "../core_timed_defs.csp"

channel terminate
	
channel followFlightPlan: SearchType
channel AreControlsResponsive: Bool

channel takePicture

channel setresponsive: Bool
channel getresponsive: Bool

channel setSearchType: SearchType
channel getSearchType: SearchType

channel setCount: IDS.core_int.core_int
channel getCount: IDS.core_int.core_int

loop_1_min_count = 1
loop_1_max_count = 4 

datatype SearchType = SearchType_AreaSearch | SearchType_RapidParallelLine | SearchType_Linear | SearchType_CreepingLine | SearchType_PointOfInterest | SearchType_MountainFace | SearchType_WoodedArea | SearchType_Avalanche
				
-- declaring identifiers of fragments
datatype IDS = 
              ID_ALT  | 
              ID_LOOP | 
              ID_PAR | 
              ID_STR

channel guard: IDS.core_int.core_int.Bool
channel alt: IDS.core_int
channel loop: IDS.core_int
channel par: IDS.core_int
channel str: IDS.core_int

nametype core_int = {0..5}


Timed(OneStep) { 
	Loop = timed_priority(((((Pilot [| diff(inter(A_Pilot,A_Handheld),gets) |] Handheld) [|diff(inter(A_Observer,union(A_Pilot,A_Handheld)),gets) |] Observer)  [| {|loop,guard,terminate|} |] guards) [| union(sharedVars, {|terminate|}) |] varMemory )) \{|guard,loop|}
	
	
	
	-- Lifelines
	
	Pilot = AreControlsResponsive?responsive ->
	 (setresponsive!responsive -> SKIP);
	  loop_Pilot_1; terminate -> SKIP
	
	Handheld = loop_Handheld_1; terminate -> SKIP
	
	Observer = loop_Observer_1; terminate -> SKIP
	
	
	
	
	-- Loop constructs

	loop_Pilot_1 = loop!ID_LOOP.1 -> guard.ID_LOOP.1.1?x -> (
					(x)&(followFlightPlan!SearchType_RapidParallelLine -> SKIP; 							
						AreControlsResponsive?responsive ->
	 					setresponsive!responsive -> loop_Pilot_1) 
					[]
					(not(x))&(SKIP)
					)		
	
	loop_Handheld_1 = loop!ID_LOOP.1 -> guard.ID_LOOP.1.1?x -> (
					(x)&(takePicture -> followFlightPlan?searchType -> 
						setSearchType!searchType -> loop_Handheld_1)
					[]
					(not(x))&(SKIP)
					)
					
	loop_Observer_1 = loop!ID_LOOP.1 -> guard.ID_LOOP.1.1?x -> (
					(x)&(takePicture -> loop_Observer_1)
					[]
					(not(x))&(SKIP)
					)
	
	
	
	
	-- Handling of guards for loop and alt constructs
	
	guards = (evaluation [| union(A_Counters, {|terminate|}) |] counters) \countVars
	
	evaluation = reset_counters; guards_response
	
	
	counters = Counter_ID_1(0) 
	
	Counter_ID_1(count) = 
				getCount.ID_LOOP.1!count -> Counter_ID_1(count)
				[]
				setCount.ID_LOOP.1?x__ -> Counter_ID_1(x__)
				[]
				terminate -> SKIP
	
	
	reset_counters = setCount.ID_LOOP.1!0 -> SKIP
	


	guards_response = loop?ID_LOOP.id -> (id==1)&(getresponsive?responsive -> getCount.ID_LOOP.1?x -> (
				not(responsive==true)&(setCount.ID_LOOP.1!0 -> SKIP; guard.ID_LOOP.1.1!false -> SKIP)
				[] (x==loop_1_max_count)&(setCount.ID_LOOP.1!0-> SKIP; guard.ID_LOOP.1.1!false -> SKIP)
				[] (not(x>=loop_1_max_count) and responsive==true)&(setCount.ID_LOOP.1!(x+1)-> SKIP; guard.ID_LOOP.1.1!true -> SKIP))); guards_response
		[] 
		terminate -> SKIP
	
	
	
	
	-- lifeline memory
	
	varMemory = Memory_searchType(SearchType_AreaSearch)
					 [| { terminate } |] 
					 Memory_responsive(true)
				 					 
	Memory_searchType(searchType) =
				getSearchType!searchType -> Memory_searchType(searchType)
				[]
				setSearchType?x__ -> Memory_searchType(x__)
				[]
				terminate -> SKIP
								
	Memory_responsive(responsive) =
				getresponsive!responsive -> Memory_responsive(responsive)
				[]
				setresponsive?x__ -> Memory_responsive(x__)
				[]
				terminate -> SKIP
}

A_Pilot = union(union({|AreControlsResponsive, followFlightPlan,terminate,loop.ID_LOOP.1,guard.ID_LOOP.1.1|},searchTypeVars),responsiveVars)

A_Handheld = {|takePicture,followFlightPlan,loop.ID_LOOP.1,guard.ID_LOOP.1.1,terminate|}

A_Observer = {|takePicture,loop.ID_LOOP.1,guard.ID_LOOP.1.1,terminate|}

A_Counters = countVars					

sharedVars = union(searchTypeVars,responsiveVars)

searchTypeVars = {|setSearchType,getSearchType|}
responsiveVars = {|getresponsive,setresponsive|}
countVars = {|getCount,setCount|}

gets = {|getresponsive,getSearchType|}

assert not Loop :[deadlock free]
assert Loop :[divergence free]
assert Loop :[deterministic]
assert Loop :[has trace [T]]: <AreControlsResponsive.false,setresponsive.false,getresponsive.false,terminate>

assert not Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,terminate> 
	
assert Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.false,setresponsive.false,
	getresponsive.false,terminate> 
	
assert Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.false,setresponsive.false,
	getresponsive.false,terminate> 
	
assert Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.false,setresponsive.false,
	getresponsive.false,terminate> 
	
assert Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,terminate> 
	
assert not Loop :[has trace [T]]: <AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine, AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.true,takePicture,followFlightPlan.SearchType_RapidParallelLine,setSearchType.SearchType_RapidParallelLine,AreControlsResponsive.true,setresponsive.true,
	getresponsive.false,terminate> 

