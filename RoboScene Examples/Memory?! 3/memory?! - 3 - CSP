include "../core_timed_defs.csp"

channel terminate
	
channel followFlightPlan: SearchType
channel WatchForAbnormalities: Bool
channel recordVideo

channel setwAbnormalities: Bool
channel getwAbnormalities: Bool

channel setSearchType: SearchType
channel getSearchType: SearchType

datatype SearchType = SearchType_AreaSearch | SearchType_RapidParallelLine | SearchType_Linear | SearchType_CreepingLine | SearchType_PointOfInterest | SearchType_MountainFace | SearchType_WoodedArea | SearchType_Avalanche


Timed(OneStep) { 
	Memory = timed_priority(((Pilot [| diff(inter(A_Pilot,A_Handheld),gets) |] Handheld) [| diff(inter(union(A_Pilot, A_Handheld),A_Observer),gets) |] Observer)[| union(sharedVars, {terminate}) |] varMemory )

	Pilot = getwAbnormalities?wAbnormalities:{wAbnormalities|wAbnormalities <- Bool} -> (WatchForAbnormalities!wAbnormalities -> SKIP); followFlightPlan!SearchType_Linear -> SKIP; terminate -> SKIP 
	
	Observer = recordVideo -> SKIP; terminate -> SKIP
	
	Handheld = recordVideo -> SKIP; followFlightPlan?searchType:{searchType|searchType <- SearchType} -> (setSearchType!searchType -> SKIP); terminate -> SKIP
	
	varMemory = Memory_searchType(SearchType_AreaSearch)
					 [| { terminate } |]
					 Memory_wAbnormalities(false)

	Memory_searchType(searchType) =
				getSearchType!searchType -> Memory_searchType(searchType)
				[]
				setSearchType?x__ -> Memory_searchType(x__)
				[]
				terminate -> SKIP
				
				
	Memory_wAbnormalities(wAbnormalities) =
				getwAbnormalities!wAbnormalities -> Memory_wAbnormalities(wAbnormalities)
				[]
				setwAbnormalities?x__ -> Memory_wAbnormalities(x__)
				[]
				terminate -> SKIP
}

A_Pilot = union(union({|WatchForAbnormalities, terminate,followFlightPlan, tock|},searchTypeVars),wAbnormalitiesVars)

A_Handheld = {|recordVideo, followFlightPlan, terminate,tock|} 

A_Observer = {|recordVideo, tock, terminate|}

sharedVars = union(searchTypeVars,wAbnormalitiesVars)

searchTypeVars = {|setSearchType,getSearchType|}
wAbnormalitiesVars = {|getwAbnormalities,setwAbnormalities|}

gets = {|getSearchType,getwAbnormalities|}

assert not Memory :[deadlock free]
assert Memory :[divergence free]
assert Memory :[deterministic]
assert Memory :[has trace [T]]: <getwAbnormalities.false,WatchForAbnormalities.false,recordVideo,followFlightPlan.SearchType_Linear,setSearchType.SearchType_Linear>
assert Memory :[has trace [T]]: <getwAbnormalities.false,recordVideo,WatchForAbnormalities.false,followFlightPlan.SearchType_Linear,setSearchType.SearchType_Linear>



