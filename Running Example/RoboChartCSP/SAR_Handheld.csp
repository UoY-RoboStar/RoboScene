
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 08-06-2024 18:40:43
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module SAR_Handheld
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel DisplayStatus: InOut.Status
	channel GetDroneBatteryStatus: InOut
	
	channel DisplayDroneBatteryStatusCall: Status
	channel GetBatteryStatusCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		DisplayStatus,
		GetDroneBatteryStatus
	,	DisplayDroneBatteryStatusCall,
		GetBatteryStatusCall
	|}
	
	-- declaring controller
		module ctrl_ref3
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel GetDroneBatteryStatus: InOut
			channel DisplayStatus: InOut.Status
			
			
			
			-- declaring call and ret events for undefined operations
			channel GetBatteryStatusCall
			channel DisplayDroneBatteryStatusCall: Status
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	GetDroneBatteryStatus,
				DisplayStatus
			,	GetBatteryStatusCall,
				DisplayDroneBatteryStatusCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_WaitForInput|
				              NID_WaitForBatteryStatus
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_astatus, set_astatus, setL_astatus, setR_astatus: Status
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel GetDroneBatteryStatus__: NIDS.InOut
				channel GetDroneBatteryStatus: InOut
				channel DisplayStatus__: NIDS.InOut.Status
				channel DisplayStatus: InOut.Status
				
				-- Declaring call and ret events for undefined operations
				channel GetBatteryStatusCall
				channel DisplayDroneBatteryStatusCall: Status
				
				enterSS = {|
				i0::enter,
				f0::enter,
				WaitForInput::enter,
				WaitForBatteryStatus::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				WaitForInput::entered,
				WaitForBatteryStatus::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	GetDroneBatteryStatus,
					DisplayStatus
				,	GetBatteryStatusCall,
					DisplayDroneBatteryStatusCall
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				channel get_CLID_WaitForInput : core_clock_type 
				channel get_CLID_WaitForBatteryStatus : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__,
						          const_BatteryStatusStm_batteryCallWaitTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_WaitForInput_clock_type(id__,
						          const_BatteryStatusStm_batteryCallWaitTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_WaitForBatteryStatus_clock_type(id__,
						          const_BatteryStatusStm_batteryCallWaitTime) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: WaitForInput
					module WaitForInput
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_BatteryStatusStm_batteryCallWaitTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: WaitForBatteryStatus
					module WaitForBatteryStatus
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_BatteryStatusStm_batteryCallWaitTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__GetBatteryStatus(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = EDeadline(GetBatteryStatusCall,0)
					CALL__DisplayDroneBatteryStatus(id__,
							    const_BatteryStatusStm_batteryCallWaitTime,
								param_status) = EDeadline(DisplayDroneBatteryStatusCall.param_status,0)
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_BatteryStatusStm_batteryCallWaitTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_BatteryStatusStm_batteryCallWaitTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_BatteryStatusStm_batteryCallWaitTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_BatteryStatusStm_batteryCallWaitTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; WaitForInput::enter -> SKIP))))
							 [] dbisim((true)&(GetDroneBatteryStatus__!NID_WaitForInput.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__GetBatteryStatus(
							 			id__,
							 		    const_BatteryStatusStm_batteryCallWaitTime
							 		) ; WaitForBatteryStatus::enter -> SKIP)))
							 [] dbisim((true)&(DisplayStatus__!NID_WaitForBatteryStatus.in?astatus:{astatus|astatus <- Status, true} -> share__choice(set_astatus!astatus -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_astatus?astatus -> true&CALL__DisplayDroneBatteryStatus(
							 			id__,
							 		    const_BatteryStatusStm_batteryCallWaitTime,
							 			astatus
							 		)) ; f0::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								WaitForInput::enter,
								WaitForBatteryStatus::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,GetDroneBatteryStatus__.NID_WaitForInput.in,DisplayStatus__.NID_WaitForBatteryStatus.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   WaitForInput::D__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   WaitForBatteryStatus::D__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[WaitForInput::interrupt <- x__ | x__ <- {|interrupt,GetDroneBatteryStatus__.NID_WaitForInput.in|}]]
									 [[WaitForBatteryStatus::interrupt <- x__ | x__ <- {|interrupt,DisplayStatus__.NID_WaitForBatteryStatus.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_astatus |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setR_astatus
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_BatteryStatusStm_batteryCallWaitTime))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									  [[set_astatus <- setR_astatus]]
									 )
									)
									 [[setR_astatus <- set_astatus]]
									)
								)
								 \ hideSet)
								[[
									GetDroneBatteryStatus__.x____ <- GetDroneBatteryStatus,
									DisplayStatus__.x____ <- DisplayStatus
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_BatteryStatusStm_batteryCallWaitTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_WaitForInput,WaitForInput::entered,get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered|}
						 within
							(MachineBody(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_BatteryStatusStm_batteryCallWaitTime)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_WaitForInput,WaitForInput::entered,get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__,
													    const_BatteryStatusStm_batteryCallWaitTime)
											[| {|get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered,terminate|} |]
											dbisim(Clock_CLID_WaitForBatteryStatus(id__,0,
													          const_BatteryStatusStm_batteryCallWaitTime))
										)\{|get_CLID_WaitForBatteryStatus|}
									)
									[| {|get_CLID_WaitForInput,WaitForInput::entered,terminate|} |]
									dbisim(Clock_CLID_WaitForInput(id__,0,
											          const_BatteryStatusStm_batteryCallWaitTime))
								)\{|get_CLID_WaitForInput|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						((let
							getsetLocalChannels = {|get_astatus,set_astatus|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_BatteryStatusStm_batteryCallWaitTime) [| {terminate} |] Clocks(id__,
							 		          const_BatteryStatusStm_batteryCallWaitTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__,
										    const_BatteryStatusStm_batteryCallWaitTime)
								[| {|get_astatus,set_astatus,terminate|} |]
								Memory_astatus(Status_High)
							)\{|get_astatus,set_astatus|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								WaitForInput::enter,
								WaitForBatteryStatus::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,GetDroneBatteryStatus__.NID_WaitForInput.in,DisplayStatus__.NID_WaitForBatteryStatus.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   WaitForInput::VS_O__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   [| { share__, terminate } |] (
									   WaitForBatteryStatus::VS_O__(id__,
									   		    const_BatteryStatusStm_batteryCallWaitTime)
									   )
									   )
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[WaitForInput::interrupt <- x__ | x__ <- {|interrupt,GetDroneBatteryStatus__.NID_WaitForInput.in|}]]
									 [[WaitForBatteryStatus::interrupt <- x__ | x__ <- {|interrupt,DisplayStatus__.NID_WaitForBatteryStatus.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_astatus |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setR_astatus
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_BatteryStatusStm_batteryCallWaitTime))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									  [[set_astatus <- setR_astatus]]
									 )
									)
									 [[setR_astatus <- set_astatus]]
									)
								)
								 \ hideSet)
								[[
									GetDroneBatteryStatus__.x____ <- GetDroneBatteryStatus,
									DisplayStatus__.x____ <- DisplayStatus
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_BatteryStatusStm_batteryCallWaitTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_WaitForInput,WaitForInput::entered,get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_BatteryStatusStm_batteryCallWaitTime)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_WaitForInput,WaitForInput::entered,get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__,
													    const_BatteryStatusStm_batteryCallWaitTime)
											[| {|get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered,terminate|} |]
											dbisim(Clock_CLID_WaitForBatteryStatus(id__,0,
													          const_BatteryStatusStm_batteryCallWaitTime))
										)\{|get_CLID_WaitForBatteryStatus|}
									)
									[| {|get_CLID_WaitForInput,WaitForInput::entered,terminate|} |]
									dbisim(Clock_CLID_WaitForInput(id__,0,
											          const_BatteryStatusStm_batteryCallWaitTime))
								)\{|get_CLID_WaitForInput|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = 
						dbisim((let
							getsetLocalChannels = {|get_astatus,set_astatus|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_BatteryStatusStm_batteryCallWaitTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_BatteryStatusStm_batteryCallWaitTime) [| {terminate} |] Clocks(id__,
							 		          const_BatteryStatusStm_batteryCallWaitTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__,
										    const_BatteryStatusStm_batteryCallWaitTime)
								[| {|get_astatus,set_astatus,terminate|} |]
								Memory_astatus(Status_High)
							)\{|get_astatus,set_astatus|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_astatus(astatus) =
						get_astatus!astatus -> Memory_astatus(astatus)
						[]
						set_astatus?x__ -> Memory_astatus(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = Memory_astatus(Status_High)
					
					getsetLocalChannels = {|get_astatus,set_astatus|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = STM_VS_O(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) \ localClockResets
					D__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = timed_priority(STM(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) \ union(internal_events,localClockResets))
					O__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = dbisim(D__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime))
					VS__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = FVS__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime)
					VS_O__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = dbisim(FVS__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime))
					HEXT__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = O__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = dbisim(timed_priority(STM(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) \ internal_events))
					HUP__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = timed_priority(O__(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_BatteryStatusStm_batteryCallWaitTime) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_WaitForInput(id__,x__,
							          const_BatteryStatusStm_batteryCallWaitTime) = 
						TimeOut_1(
							WaitForInput::entered -> Clock_CLID_WaitForInput(id__,0,
									          const_BatteryStatusStm_batteryCallWaitTime)
							[]
							get_CLID_WaitForInput!x__ -> Clock_CLID_WaitForInput(id__,x__,
									          const_BatteryStatusStm_batteryCallWaitTime)
							[]
							terminate -> SKIP,Clock_CLID_WaitForInput(id__,clock_type_plus(x__,1,CLID_WaitForInput_clock_type(id__,
									          const_BatteryStatusStm_batteryCallWaitTime)),
									          const_BatteryStatusStm_batteryCallWaitTime))
					Clock_CLID_WaitForBatteryStatus(id__,x__,
							          const_BatteryStatusStm_batteryCallWaitTime) = 
						TimeOut_1(
							WaitForBatteryStatus::entered -> Clock_CLID_WaitForBatteryStatus(id__,0,
									          const_BatteryStatusStm_batteryCallWaitTime)
							[]
							get_CLID_WaitForBatteryStatus!x__ -> Clock_CLID_WaitForBatteryStatus(id__,x__,
									          const_BatteryStatusStm_batteryCallWaitTime)
							[]
							terminate -> SKIP,Clock_CLID_WaitForBatteryStatus(id__,clock_type_plus(x__,1,CLID_WaitForBatteryStatus_clock_type(id__,
									          const_BatteryStatusStm_batteryCallWaitTime)),
									          const_BatteryStatusStm_batteryCallWaitTime))
					
					StateClocks(id__,
							          const_BatteryStatusStm_batteryCallWaitTime) = dbisim(Clock_CLID_WaitForInput(id__,0,
							          const_BatteryStatusStm_batteryCallWaitTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_WaitForBatteryStatus(id__,0,
							          const_BatteryStatusStm_batteryCallWaitTime))
					)
					
					stateClockSync = {|get_CLID_WaitForInput,WaitForInput::entered,get_CLID_WaitForBatteryStatus,WaitForBatteryStatus::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_BatteryStatusStm_batteryCallWaitTime) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__GetBatteryStatus(id__) 	= GetBatteryStatusCall -> SKIP
					CALL__DisplayDroneBatteryStatus(id__,
							    param_status) 	= DisplayDroneBatteryStatusCall.param_status -> SKIP
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) = prioritise(	((
							let
								const_BatteryStatusStm_batteryCallWaitTime = const_BatteryController_stm_ref0_batteryCallWaitTime
							within 
							stm_ref0::D__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								stm_ref0::DisplayStatus <- DisplayStatus,
								stm_ref0::GetBatteryStatusCall <- GetBatteryStatusCall,
								stm_ref0::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) = prioritise(	((
							let
								const_BatteryStatusStm_batteryCallWaitTime = const_BatteryController_stm_ref0_batteryCallWaitTime
							within 
							stm_ref0::VS__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								stm_ref0::DisplayStatus <- DisplayStatus,
								stm_ref0::GetBatteryStatusCall <- GetBatteryStatusCall,
								stm_ref0::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) = dbisim(prioritise(	((
							let
								const_BatteryStatusStm_batteryCallWaitTime = const_BatteryController_stm_ref0_batteryCallWaitTime
							within 
							stm_ref0::O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								stm_ref0::DisplayStatus <- DisplayStatus,
								stm_ref0::GetBatteryStatusCall <- GetBatteryStatusCall,
								stm_ref0::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) = dbisim(prioritise(	((
							let
								const_BatteryStatusStm_batteryCallWaitTime = const_BatteryController_stm_ref0_batteryCallWaitTime
							within 
							stm_ref0::VS_O__(id__,
									    const_BatteryStatusStm_batteryCallWaitTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								stm_ref0::DisplayStatus <- DisplayStatus,
								stm_ref0::GetBatteryStatusCall <- GetBatteryStatusCall,
								stm_ref0::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) = O__(id__,
							    const_BatteryController_stm_ref0_batteryCallWaitTime) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__,
				    const_BatteryController_stm_ref0_batteryCallWaitTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref3::D__(id__,
									    const_BatteryController_stm_ref0_batteryCallWaitTime)[[
								ctrl_ref3::terminate <- terminate,
								ctrl_ref3::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								ctrl_ref3::DisplayStatus <- DisplayStatus,
								ctrl_ref3::GetBatteryStatusCall <- GetBatteryStatusCall,
								ctrl_ref3::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_BatteryController_stm_ref0_batteryCallWaitTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref3::VS__(id__,
									    const_BatteryController_stm_ref0_batteryCallWaitTime)[[
								ctrl_ref3::terminate <- terminate,
								ctrl_ref3::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								ctrl_ref3::DisplayStatus <- DisplayStatus,
								ctrl_ref3::GetBatteryStatusCall <- GetBatteryStatusCall,
								ctrl_ref3::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_BatteryController_stm_ref0_batteryCallWaitTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref3::O__(id__,
									    const_BatteryController_stm_ref0_batteryCallWaitTime)[[
								ctrl_ref3::terminate <- terminate,
								ctrl_ref3::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								ctrl_ref3::DisplayStatus <- DisplayStatus,
								ctrl_ref3::GetBatteryStatusCall <- GetBatteryStatusCall,
								ctrl_ref3::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_BatteryController_stm_ref0_batteryCallWaitTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref3::VS_O__(id__,
									    const_BatteryController_stm_ref0_batteryCallWaitTime)[[
								ctrl_ref3::terminate <- terminate,
								ctrl_ref3::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								ctrl_ref3::DisplayStatus <- DisplayStatus,
								ctrl_ref3::GetBatteryStatusCall <- GetBatteryStatusCall,
								ctrl_ref3::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_BatteryController_stm_ref0_batteryCallWaitTime) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref3::O__(id__,
									    const_BatteryController_stm_ref0_batteryCallWaitTime)[[
								ctrl_ref3::terminate <- terminate,
								ctrl_ref3::GetDroneBatteryStatus <- GetDroneBatteryStatus,
								ctrl_ref3::DisplayStatus <- DisplayStatus,
								ctrl_ref3::GetBatteryStatusCall <- GetBatteryStatusCall,
								ctrl_ref3::DisplayDroneBatteryStatusCall <- DisplayDroneBatteryStatusCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule
