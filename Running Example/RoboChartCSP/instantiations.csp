-- generate --

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- generate nat
nametype core_nat = union({0..2},{calc_type_min(Union(
			{{0..2},{0..2}}))..calc_type_max(Union({{0..2},{0..2}}))})

-- generate core_clock_type
nametype core_clock_type = {0..10}

-- BASIC FUNCTIONS

-- generate const_SAR_Stm_operationTime
const_SAR_Stm_operationTime = 0

-- generate string
nametype core_string = LSeq(Char,2)

-- generate const_BatteryStatusStm_batteryCallWaitTime
const_BatteryStatusStm_batteryCallWaitTime = 0

-- generate real
nametype core_real = union({ -2..2},{calc_type_min(Union(
			{{0..2},{0..2}}))..calc_type_max(Union({{0..2},{0..2}}))}) 

-- VECTOR TYPES AND OPERATIONS


-- CLOCKS

-- generate int
nametype core_int = union({ -2..2},{calc_type_min(Union(
			{{0..2},{0..2}}))..calc_type_max(Union({{0..2},{0..2}}))})

-- generate -- OPERATION BOUNDS

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate boolean
nametype core_boolean = Bool

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate const_BatteryController_stm_ref0_batteryCallWaitTime
const_BatteryController_stm_ref0_batteryCallWaitTime = 0

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate const_SAR_Controller_stm_ref0_operationTime
const_SAR_Controller_stm_ref0_operationTime = 0

-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

